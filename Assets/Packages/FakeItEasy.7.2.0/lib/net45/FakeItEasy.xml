<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FakeItEasy</name>
    </assembly>
    <members>
        <member name="T:FakeItEasy.A">
            <summary>
            Provides methods for generating fake objects.
            </summary>
        </member>
        <member name="M:FakeItEasy.A.Fake``1">
            <summary>
            Creates a fake object of the type T.
            </summary>
            <typeparam name="T">The type of fake object to create.</typeparam>
            <returns>A fake object.</returns>
        </member>
        <member name="M:FakeItEasy.A.Fake``1(System.Action{FakeItEasy.Creation.IFakeOptions{``0}})">
            <summary>
            Creates a fake object of the type T.
            </summary>
            <typeparam name="T">The type of fake object to create.</typeparam>
            <param name="optionsBuilder">A function that specifies options for the fake object.</param>
            <returns>A fake object.</returns>
        </member>
        <member name="M:FakeItEasy.A.CollectionOfFake``1(System.Int32)">
            <summary>
            Creates a collection of fakes of the specified type.
            </summary>
            <typeparam name="T">The type of fakes to create.</typeparam>
            <param name="numberOfFakes">The number of fakes in the collection.</param>
            <returns>A collection of fake objects of the specified type.</returns>
        </member>
        <member name="M:FakeItEasy.A.CollectionOfFake``1(System.Int32,System.Action{FakeItEasy.Creation.IFakeOptions{``0}})">
            <summary>
            Creates a collection of fakes of the specified type.
            </summary>
            <typeparam name="T">The type of fakes to create.</typeparam>
            <param name="numberOfFakes">The number of fakes in the collection.</param>
            <param name="optionsBuilder">A function that specifies options for each fake object.</param>
            <returns>A collection of fake objects of the specified type.</returns>
        </member>
        <member name="M:FakeItEasy.A.CollectionOfFake``1(System.Int32,System.Action{FakeItEasy.Creation.IFakeOptions{``0},System.Int32})">
            <summary>
            Creates a collection of fakes of the specified type.
            </summary>
            <typeparam name="T">The type of fakes to create.</typeparam>
            <param name="numberOfFakes">The number of fakes in the collection.</param>
            <param name="optionsBuilder">
            A function that specifies options for each fake object;
            the second parameter of the function represents the 0-based index of the source element.
            </param>
            <returns>A collection of fake objects of the specified type.</returns>
        </member>
        <member name="M:FakeItEasy.A.Dummy``1">
            <summary>
            Gets a dummy object of the specified type. The value of a dummy object
            should be irrelevant. Dummy objects should not be configured.
            </summary>
            <typeparam name="T">The type of dummy to return.</typeparam>
            <returns>
            A dummy object of the specified type.
            May be null, if a dummy factory is defined that returns null for dummies of type <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Dummies of the specified type can not be created.</exception>
        </member>
        <member name="M:FakeItEasy.A.CollectionOfDummy``1(System.Int32)">
            <summary>
            Creates a collection of dummies of the specified type.
            </summary>
            <typeparam name="T">The type of dummies to create.</typeparam>
            <param name="numberOfDummies">The number of dummies in the collection.</param>
            <returns>
            A collection of dummy objects of the specified type.
            Individual dummies may be null, if a dummy factory is defined that returns null for dummies of type <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Dummies of the specified type can not be created.</exception>
        </member>
        <member name="M:FakeItEasy.A.CallTo(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Configures a call to a faked object.
            </summary>
            <param name="callSpecification">An expression where the configured member is called.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.A.CallTo(System.Object)">
            <summary>
            Gets a configuration object allowing for further configuration of
            any call to the specified faked object.
            </summary>
            <param name="fake">
            The fake to configure.
            </param>
            <returns>
            A configuration object.
            </returns>
        </member>
        <member name="M:FakeItEasy.A.CallTo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Configures a call to a faked object.
            </summary>
            <typeparam name="T">The type of member on the faked object to configure.</typeparam>
            <param name="callSpecification">An expression where the configured member is called.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.A.CallToSet``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Configures the setting of a property on a faked object.
            </summary>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="propertySpecification">An expression that calls the getter of the property to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.A.CallTo(System.Object,FakeItEasy.EventAction)">
            <summary>
            Configures subscription to or unsubscription from an event of a faked object.
            </summary>
            <param name="fake">The fake to configure.</param>
            <param name="action">An <see cref="T:FakeItEasy.EventAction"/> that represents the action to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.A`1">
            <summary>
            Provides an API entry point for constraining arguments of fake object calls.
            </summary>
            <typeparam name="T">The type of argument to validate.</typeparam>
            <remarks>If desired, <see cref="T:FakeItEasy.An`1"/> may be used to specify constraints on types whose names begin with a vowel sound.</remarks>
        </member>
        <member name="P:FakeItEasy.A`1.That">
            <summary>
            Gets an argument constraint object that will be used to constrain a method call argument.
            </summary>
        </member>
        <member name="P:FakeItEasy.A`1._">
            <summary>
            Gets a constraint that considers any value of an argument as valid.
            </summary>
            <remarks>This is a shortcut for the "Ignored"-property.</remarks>
        </member>
        <member name="P:FakeItEasy.A`1.Ignored">
            <summary>
            Gets a constraint that considers any value of an argument as valid.
            </summary>
        </member>
        <member name="T:FakeItEasy.An`1">
            <summary>
            Provides an API entry point for constraining arguments of fake object calls.
            </summary>
            <typeparam name="T">The type of argument to validate.</typeparam>
            <remarks>If desired, <see cref="T:FakeItEasy.A`1"/> may be used to specify constraints on types whose names begin with a consonant sound.</remarks>
        </member>
        <member name="P:FakeItEasy.An`1.That">
            <summary>
            Gets an argument constraint object that will be used to constrain a method call argument.
            </summary>
        </member>
        <member name="P:FakeItEasy.An`1._">
            <summary>
            Gets a constraint that considers any value of an argument as valid.
            </summary>
            <remarks>This is a shortcut for the "Ignored"-property.</remarks>
        </member>
        <member name="P:FakeItEasy.An`1.Ignored">
            <summary>
            Gets a constraint that considers any value of an argument as valid.
            </summary>
        </member>
        <member name="T:FakeItEasy.ArgumentConstraintManagerExtensions">
            <summary>
            Provides validation extensions for <see cref="T:FakeItEasy.IArgumentConstraintManager`1"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsNull``1(FakeItEasy.IArgumentConstraintManager{``0})">
            <summary>
            Constrains an argument so that it must be null (Nothing in VB).
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="manager">The constraint manager to match the constraint.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsNull``1(FakeItEasy.IArgumentConstraintManager{System.Nullable{``0}})">
            <summary>
            Constrains an argument so that it must be null (Nothing in VB).
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="manager">The constraint manager to match the constraint.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsNotNull``1(FakeItEasy.INegatableArgumentConstraintManager{``0})">
            <summary>
            Constrains an argument so that it must not be null (Nothing in VB).
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="manager">The constraint manager to match the constraint.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsNotNull``1(FakeItEasy.INegatableArgumentConstraintManager{System.Nullable{``0}})">
            <summary>
            Constrains an argument so that it must not be null (Nothing in VB).
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="manager">The constraint manager to match the constraint.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.Contains(FakeItEasy.IArgumentConstraintManager{System.String},System.String)">
            <summary>
            Constrains the string argument to contain the specified text, using the <see cref="F:System.StringComparison.Ordinal" /> comparison type.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The string the argument string should contain.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.Contains(FakeItEasy.IArgumentConstraintManager{System.String},System.String,System.StringComparison)">
            <summary>
            Constrains the string argument to contain the specified text, using the specified comparison type.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The string the argument string should contain.</param>
            <param name="comparisonType">The type of string comparison to use.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.Contains``1(FakeItEasy.IArgumentConstraintManager{``0},System.Object)">
            <summary>
            Constrains the sequence so that it must contain the specified value.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The value the collection should contain.</param>
            <typeparam name="T">The type of sequence.</typeparam>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.StartsWith(FakeItEasy.IArgumentConstraintManager{System.String},System.String)">
            <summary>
            Constrains the string so that it must start with the specified value,
            using the <see cref="F:System.StringComparison.Ordinal" /> comparison type.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The value the string should start with.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.StartsWith(FakeItEasy.IArgumentConstraintManager{System.String},System.String,System.StringComparison)">
            <summary>
            Constrains the string so that it must start with the specified value, using the specified comparison type.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The value the string should start with.</param>
            <param name="comparisonType">The type of string comparison to use.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.EndsWith(FakeItEasy.IArgumentConstraintManager{System.String},System.String)">
            <summary>
            Constrains the string so that it must end with the specified value,
            using the <see cref="F:System.StringComparison.Ordinal" /> comparison type.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The value the string should end with.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.EndsWith(FakeItEasy.IArgumentConstraintManager{System.String},System.String,System.StringComparison)">
            <summary>
            Constrains the string so that it must end with the specified value, using the specified comparison type.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The value the string should end with.</param>
            <param name="comparisonType">The type of string comparison to use.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsNullOrEmpty(FakeItEasy.IArgumentConstraintManager{System.String})">
            <summary>
            Constrains the string so that it must be null or empty.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsGreaterThan``1(FakeItEasy.IArgumentConstraintManager{``0},``0)">
            <summary>
            Constrains argument value so that it must be greater than the specified value.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The value the string should start with.</param>
            <typeparam name="T">The type of argument to constrain.</typeparam>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsSameSequenceAs``1(FakeItEasy.IArgumentConstraintManager{``0},System.Collections.IEnumerable)">
            <summary>
            The tested argument collection should contain the same elements as the
            specified collection, in the same order.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="values">The sequence to test against.</param>
            <typeparam name="T">The type of argument to constrain.</typeparam>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsSameSequenceAs``1(FakeItEasy.IArgumentConstraintManager{``0},System.Object[])">
            <summary>
            The tested argument collection should contain the same elements as the
            specified collection, in the same order.
            </summary>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="values">The sequence to test against.</param>
            <typeparam name="T">The type of argument to constrain.</typeparam>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsEmpty``1(FakeItEasy.IArgumentConstraintManager{``0})">
            <summary>
            Tests that the IEnumerable contains no items.
            </summary>
            <typeparam name="T">The type of argument.</typeparam>
            <param name="manager">The constraint manager to match the constraint.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsEqualTo``1(FakeItEasy.IArgumentConstraintManager{``0},``0)">
            <summary>
            Tests that the passed in argument is equal to the specified value.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The value to compare to.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsEqualTo``1(FakeItEasy.IArgumentConstraintManager{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Tests that the passed in argument is equal to the specified value using provided equality comparer.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The value to compare to.</param>
            <param name="comparer">The comparer to use for equality comparison.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsSameAs``1(FakeItEasy.IArgumentConstraintManager{``0},``0)">
            <summary>
            Tests that the passed in argument is the same instance (reference) as the specified value.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="manager">The constraint manager to match the constraint.</param>
            <param name="value">The reference to compare to.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsInstanceOf``1(FakeItEasy.IArgumentConstraintManager{``0},System.Type)">
            <summary>
            Constrains the argument to be of the specified type.
            </summary>
            <typeparam name="T">The type of argument in the method signature.</typeparam>
            <param name="manager">The constraint manager.</param>
            <param name="type">The type to constrain the argument with.</param>
            <returns>A dummy value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.Matches``1(FakeItEasy.IArgumentConstraintManager{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
            Constrains the argument with a predicate.
            </summary>
            <param name="manager">
            The constraint manager.
            </param>
            <param name="predicate">
            The predicate that should constrain the argument.
            </param>
            <param name="description">
            A human readable description of the constraint.
            </param>
            <typeparam name="T">
            The type of argument in the method signature.
            </typeparam>
            <returns>
            A dummy argument value.
            </returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.Matches``1(FakeItEasy.IArgumentConstraintManager{``0},System.Func{``0,System.Boolean},System.String,System.Object[])">
            <summary>
            Constrains the argument with a predicate.
            </summary>
            <param name="manager">
            The constraint manager.
            </param>
            <param name="predicate">
            The predicate that should constrain the argument.
            </param>
            <param name="descriptionFormat">
            A human readable description of the constraint format string.
            </param>
            <param name="args">
            Arguments for the format string.
            </param>
            <typeparam name="T">
            The type of argument in the method signature.
            </typeparam>
            <returns>
            A dummy argument value.
            </returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.Matches``1(FakeItEasy.IArgumentConstraintManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Constrains the argument with a predicate.
            </summary>
            <param name="manager">
            The constraint manager.
            </param>
            <param name="predicate">
            The predicate that should constrain the argument.
            </param>
            <typeparam name="T">
            The type of argument in the method signature.
            </typeparam>
            <returns>
            A dummy argument value.
            </returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.NullCheckedMatches``1(FakeItEasy.IArgumentConstraintManager{``0},System.Func{``0,System.Boolean},System.Action{FakeItEasy.IOutputWriter})">
            <summary>
            Constrains the argument to be not null (Nothing in VB) and to match
            the specified predicate.
            </summary>
            <typeparam name="T">The type of the argument to constrain.</typeparam>
            <param name="manager">The constraint manager.</param>
            <param name="predicate">The predicate that constrains non null values.</param>
            <param name="descriptionWriter">An action that writes a description of the constraint
            to the output.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsCanceled(FakeItEasy.IArgumentConstraintManager{System.Threading.CancellationToken})">
            <summary>
            Constrains the <see cref="T:System.Threading.CancellationToken"/> argument to be canceled (<c>IsCancellationRequested</c> is true).
            </summary>
            <param name="manager">The constraint manager.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentConstraintManagerExtensions.IsNotCanceled(FakeItEasy.INegatableArgumentConstraintManager{System.Threading.CancellationToken})">
            <summary>
            Constrains the <see cref="T:System.Threading.CancellationToken"/> argument to be not canceled (<c>IsCancellationRequested</c> is false).
            </summary>
            <param name="manager">The constraint manager.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="T:FakeItEasy.ArgumentValidationConfigurationExtensions">
            <summary>
            Provides extension methods for <see cref="T:FakeItEasy.Configuration.IArgumentValidationConfiguration`1"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.ArgumentValidationConfigurationExtensions.WithAnyArguments``1(FakeItEasy.Configuration.IArgumentValidationConfiguration{``0})">
            <summary>
            Specifies that a call to the configured call should be applied no matter what arguments
            are used in the call to the faked object.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentValidationConfigurationExtensions.WhenArgumentsMatch``2(FakeItEasy.Configuration.IArgumentValidationConfiguration{``0},System.Func{``1,System.Boolean})">
            <summary>
            Configures the call to be accepted when the specified predicate returns true.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="argumentsPredicate">The argument predicate.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentValidationConfigurationExtensions.WhenArgumentsMatch``3(FakeItEasy.Configuration.IArgumentValidationConfiguration{``0},System.Func{``1,``2,System.Boolean})">
            <summary>
            Configures the call to be accepted when the specified predicate returns true.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="argumentsPredicate">The argument predicate.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentValidationConfigurationExtensions.WhenArgumentsMatch``4(FakeItEasy.Configuration.IArgumentValidationConfiguration{``0},System.Func{``1,``2,``3,System.Boolean})">
            <summary>
            Configures the call to be accepted when the specified predicate returns true.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="argumentsPredicate">The argument predicate.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentValidationConfigurationExtensions.WhenArgumentsMatch``5(FakeItEasy.Configuration.IArgumentValidationConfiguration{``0},System.Func{``1,``2,``3,``4,System.Boolean})">
            <summary>
            Configures the call to be accepted when the specified predicate returns true.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="argumentsPredicate">The argument predicate.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentValidationConfigurationExtensions.WhenArgumentsMatch``6(FakeItEasy.Configuration.IArgumentValidationConfiguration{``0},System.Func{``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            Configures the call to be accepted when the specified predicate returns true.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="argumentsPredicate">The argument predicate.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentValidationConfigurationExtensions.WhenArgumentsMatch``7(FakeItEasy.Configuration.IArgumentValidationConfiguration{``0},System.Func{``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            Configures the call to be accepted when the specified predicate returns true.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="argumentsPredicate">The argument predicate.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentValidationConfigurationExtensions.WhenArgumentsMatch``8(FakeItEasy.Configuration.IArgumentValidationConfiguration{``0},System.Func{``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            Configures the call to be accepted when the specified predicate returns true.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="argumentsPredicate">The argument predicate.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentValidationConfigurationExtensions.WhenArgumentsMatch``9(FakeItEasy.Configuration.IArgumentValidationConfiguration{``0},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            Configures the call to be accepted when the specified predicate returns true.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="argumentsPredicate">The argument predicate.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.ArgumentValueFormatter`1">
            <summary>
            Provides string formatting for arguments of type T when written in call lists.
            </summary>
            <typeparam name="T">The type of the arguments which will be formatted by this instance.</typeparam>
        </member>
        <member name="P:FakeItEasy.ArgumentValueFormatter`1.ForType">
            <summary>
            Gets the type of arguments this formatter works on.
            </summary>
        </member>
        <member name="P:FakeItEasy.ArgumentValueFormatter`1.Priority">
            <summary>
            Gets the priority of the formatter, when two formatters are
            registered for the same type the one with the highest priority value is used.
            </summary>
            <remarks>The default implementation returns <see cref="P:FakeItEasy.Priority.Default"/>.</remarks>
        </member>
        <member name="M:FakeItEasy.ArgumentValueFormatter`1.GetArgumentValueAsString(System.Object)">
            <summary>
            Gets a string representing the specified argument value.
            </summary>
            <param name="argumentValue">The argument value to get as a string.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:FakeItEasy.ArgumentValueFormatter`1.GetStringValue(`0)">
            <summary>
            Gets a string representing the specified argument value.
            </summary>
            <param name="argumentValue">The argument value to get as a string.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="T:FakeItEasy.AssertConfigurationExtensions">
            <summary>
            Provides extension methods for <see cref="T:FakeItEasy.Configuration.IAssertConfiguration"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.AssertConfigurationExtensions.MustHaveHappened(FakeItEasy.Configuration.IAssertConfiguration)">
            <summary>
            Asserts that the specified call must have happened once or more.
            </summary>
            <param name="configuration">The configuration to assert on.</param>
            <returns>An object to assert the call order.</returns>
        </member>
        <member name="M:FakeItEasy.AssertConfigurationExtensions.MustNotHaveHappened(FakeItEasy.Configuration.IAssertConfiguration)">
            <summary>
            Asserts that the specified call has not happened.
            </summary>
            <param name="configuration">The configuration to assert on.</param>
        </member>
        <member name="M:FakeItEasy.AssertConfigurationExtensions.MustHaveHappenedOnceExactly(FakeItEasy.Configuration.IAssertConfiguration)">
            <summary>
            Asserts that the specified call must have happened once exactly.
            </summary>
            <param name="configuration">The configuration to assert on.</param>
            <returns>An object to assert the call order.</returns>
        </member>
        <member name="M:FakeItEasy.AssertConfigurationExtensions.MustHaveHappenedOnceOrMore(FakeItEasy.Configuration.IAssertConfiguration)">
            <summary>
            Asserts that the specified call must have happened once or more.
            </summary>
            <param name="configuration">The configuration to assert on.</param>
            <returns>An object to assert the call order.</returns>
        </member>
        <member name="M:FakeItEasy.AssertConfigurationExtensions.MustHaveHappenedOnceOrLess(FakeItEasy.Configuration.IAssertConfiguration)">
            <summary>
            Asserts that the specified call must have happened once or less.
            </summary>
            <param name="configuration">The configuration to assert on.</param>
            <returns>An object to assert the call order.</returns>
        </member>
        <member name="M:FakeItEasy.AssertConfigurationExtensions.MustHaveHappenedTwiceExactly(FakeItEasy.Configuration.IAssertConfiguration)">
            <summary>
            Asserts that the specified call must have happened twice exactly.
            </summary>
            <param name="configuration">The configuration to assert on.</param>
            <returns>An object to assert the call order.</returns>
        </member>
        <member name="M:FakeItEasy.AssertConfigurationExtensions.MustHaveHappenedTwiceOrMore(FakeItEasy.Configuration.IAssertConfiguration)">
            <summary>
            Asserts that the specified call must have happened twice or more.
            </summary>
            <param name="configuration">The configuration to assert on.</param>
            <returns>An object to assert the call order.</returns>
        </member>
        <member name="M:FakeItEasy.AssertConfigurationExtensions.MustHaveHappenedTwiceOrLess(FakeItEasy.Configuration.IAssertConfiguration)">
            <summary>
            Asserts that the specified call must have happened twice or less.
            </summary>
            <param name="configuration">The configuration to assert on.</param>
            <returns>An object to assert the call order.</returns>
        </member>
        <member name="T:FakeItEasy.AsyncReturnValueConfigurationExtensions">
            <summary>
            Provides extension methods for <see cref="T:FakeItEasy.Configuration.IReturnValueConfiguration`1"/> to configure async methods to return a failed task.
            </summary>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task},System.Exception)">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exception">The exception to set on the returned task when a call that matches is invoked.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task},System.Func{FakeItEasy.Core.IFakeObjectCall,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task},System.Func{System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``1(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Exception)">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exception">The exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T">The type of the returned task's result.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``1(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{FakeItEasy.Core.IFakeObjectCall,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T">The type of the returned task's result.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``1(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T">The type of the returned task's result.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``1(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task},System.Func{``0,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``2(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T">The type of the returned task's result.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``2(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task},System.Func{``0,``1,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``3(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T">The type of the returned task's result.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``3(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task},System.Func{``0,``1,``2,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``4(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,``3,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T">The type of the returned task's result.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``4(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task},System.Func{``0,``1,``2,``3,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``5(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,``3,``4,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T">The type of the returned task's result.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``5(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task},System.Func{``0,``1,``2,``3,``4,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``6(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,``3,``4,``5,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T">The type of the returned task's result.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``6(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task},System.Func{``0,``1,``2,``3,``4,``5,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``7(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,``3,``4,``5,``6,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T">The type of the returned task's result.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``7(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``8(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,``3,``4,``5,``6,``7,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T">The type of the returned task's result.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``8(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.AsyncReturnValueConfigurationExtensions.ThrowsAsync``9(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,System.Exception})">
            <summary>
            Returns a failed task with the specified exception when the currently configured call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to set on the returned task when a call that matches is invoked.</param>
            <typeparam name="T">The type of the returned task's result.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.BehaviorLifetimeConfigurationExtensions">
            <summary>
            Provides extensions for <see cref="T:FakeItEasy.Configuration.IBehaviorLifetimeConfiguration`1"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.BehaviorLifetimeConfigurationExtensions.Once``1(FakeItEasy.Configuration.IBehaviorLifetimeConfiguration{``0})">
            <summary>
            Specifies that a call's configured behavior should apply only for 1 call.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <param name="configuration">The configuration on which to set the behavior lifetime to 1.</param>
            <returns>A configuration object that lets you define the subsequent behavior.</returns>
        </member>
        <member name="M:FakeItEasy.BehaviorLifetimeConfigurationExtensions.Twice``1(FakeItEasy.Configuration.IBehaviorLifetimeConfiguration{``0})">
            <summary>
            Specifies that a call's configured behavior should apply only for 2 calls.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <param name="configuration">The configuration on which to set the behavior lifetime to 2.</param>
            <returns>A configuration object that lets you define the subsequent behavior.</returns>
        </member>
        <member name="T:FakeItEasy.CallbackConfigurationExtensions">
            <summary>
            Provides extension methods for <see cref="T:FakeItEasy.Configuration.ICallbackConfiguration`1"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.CallbackConfigurationExtensions.Invokes``1(FakeItEasy.Configuration.ICallbackConfiguration{``0},System.Action)">
            <summary>
            Executes the specified action when a matching call is being made. This overload can also be used to fake calls with arguments when they don't need to be accessed.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <param name="configuration">The configuration that is extended.</param>
            <param name="actionToInvoke">The <see cref="T:System.Action" /> to invoke.</param>
            <returns>The fake object.</returns>
        </member>
        <member name="M:FakeItEasy.CallbackConfigurationExtensions.Invokes``2(FakeItEasy.Configuration.ICallbackConfiguration{``0},System.Action{``1})">
            <summary>
            Executes the specified action when a matching call is being made.
            </summary>
            <param name="configuration">The configuration that is extended.</param>
            <param name="actionToInvoke">The <see cref="T:System.Action`1"/> to invoke.</param>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="actionToInvoke"/> do not match.</exception>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.CallbackConfigurationExtensions.Invokes``3(FakeItEasy.Configuration.ICallbackConfiguration{``0},System.Action{``1,``2})">
            <summary>
            Executes the specified action when a matching call is being made.
            </summary>
            <param name="configuration">The configuration that is extended.</param>
            <param name="actionToInvoke">The <see cref="T:System.Action`2"/> to invoke.</param>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="actionToInvoke"/> do not match.</exception>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.CallbackConfigurationExtensions.Invokes``4(FakeItEasy.Configuration.ICallbackConfiguration{``0},System.Action{``1,``2,``3})">
            <summary>
            Executes the specified action when a matching call is being made.
            </summary>
            <param name="configuration">The configuration that is extended.</param>
            <param name="actionToInvoke">The <see cref="T:System.Action`3"/> to invoke.</param>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="actionToInvoke"/> do not match.</exception>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.CallbackConfigurationExtensions.Invokes``5(FakeItEasy.Configuration.ICallbackConfiguration{``0},System.Action{``1,``2,``3,``4})">
            <summary>
            Executes the specified action when a matching call is being made.
            </summary>
            <param name="configuration">The configuration that is extended.</param>
            <param name="actionToInvoke">The <see cref="T:System.Action`4"/> to invoke.</param>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="actionToInvoke"/> do not match.</exception>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.CallbackConfigurationExtensions.Invokes``6(FakeItEasy.Configuration.ICallbackConfiguration{``0},System.Action{``1,``2,``3,``4,``5})">
            <summary>
            Executes the specified action when a matching call is being made.
            </summary>
            <param name="configuration">The configuration that is extended.</param>
            <param name="actionToInvoke">The <see cref="T:System.Action`5"/> to invoke.</param>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="actionToInvoke"/> do not match.</exception>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.CallbackConfigurationExtensions.Invokes``7(FakeItEasy.Configuration.ICallbackConfiguration{``0},System.Action{``1,``2,``3,``4,``5,``6})">
            <summary>
            Executes the specified action when a matching call is being made.
            </summary>
            <param name="configuration">The configuration that is extended.</param>
            <param name="actionToInvoke">The <see cref="T:System.Action`6"/> to invoke.</param>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="actionToInvoke"/> do not match.</exception>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.CallbackConfigurationExtensions.Invokes``8(FakeItEasy.Configuration.ICallbackConfiguration{``0},System.Action{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Executes the specified action when a matching call is being made.
            </summary>
            <param name="configuration">The configuration that is extended.</param>
            <param name="actionToInvoke">The <see cref="T:System.Action`7"/> to invoke.</param>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="actionToInvoke"/> do not match.</exception>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.CallbackConfigurationExtensions.Invokes``9(FakeItEasy.Configuration.ICallbackConfiguration{``0},System.Action{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Executes the specified action when a matching call is being made.
            </summary>
            <param name="configuration">The configuration that is extended.</param>
            <param name="actionToInvoke">The <see cref="T:System.Action`8"/> to invoke.</param>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="actionToInvoke"/> do not match.</exception>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.CompletedFakeObjectCallExtensions">
            <summary>
            Provides extension methods for <see cref="T:FakeItEasy.Core.ICompletedFakeObjectCall"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.CompletedFakeObjectCallExtensions.Matching``1(System.Collections.Generic.IEnumerable{FakeItEasy.Core.ICompletedFakeObjectCall},System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Filters to contain only the calls that matches the call specification.
            </summary>
            <typeparam name="TFake">The type of fake the call is made on.</typeparam>
            <param name="calls">The calls to filter.</param>
            <param name="callSpecification">The call to match on.</param>
            <returns>A collection of the calls that matches the call specification.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.Throws``1(System.Func{``0,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.Throws``2(System.Func{``0,``1,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.Throws``3(System.Func{``0,``1,``2,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.Throws``4(System.Func{``0,``1,``2,``3,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.Throws``5(System.Func{``0,``1,``2,``3,``4,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.Throws``6(System.Func{``0,``1,``2,``3,``4,``5,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.Throws``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.Throws``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.AssignsOutAndRefParametersLazily``1(System.Func{``0,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.AssignsOutAndRefParametersLazily``2(System.Func{``0,``1,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.AssignsOutAndRefParametersLazily``3(System.Func{``0,``1,``2,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.AssignsOutAndRefParametersLazily``4(System.Func{``0,``1,``2,``3,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.AssignsOutAndRefParametersLazily``5(System.Func{``0,``1,``2,``3,``4,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.AssignsOutAndRefParametersLazily``6(System.Func{``0,``1,``2,``3,``4,``5,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.AssignsOutAndRefParametersLazily``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.AnyCallConfiguration.AssignsOutAndRefParametersLazily``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="T:FakeItEasy.Configuration.ArgumentCollection">
            <summary>
              A collection of method arguments.
            </summary>
        </member>
        <member name="F:FakeItEasy.Configuration.ArgumentCollection.arguments">
            <summary>
              The arguments this collection contains.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.ArgumentCollection.#ctor(System.Object[],System.Reflection.MethodInfo)">
            <summary>
              Initializes a new instance of the <see cref = "T:FakeItEasy.Configuration.ArgumentCollection" /> class.
            </summary>
            <param name = "arguments">The arguments.</param>
            <param name = "method">The method.</param>
        </member>
        <member name="P:FakeItEasy.Configuration.ArgumentCollection.Count">
            <summary>
              Gets the number of arguments in the list.
            </summary>
        </member>
        <member name="P:FakeItEasy.Configuration.ArgumentCollection.ArgumentNames">
            <summary>
              Gets the names of the arguments in the list.
            </summary>
        </member>
        <member name="P:FakeItEasy.Configuration.ArgumentCollection.Item(System.Int32)">
            <summary>
              Gets the argument at the specified index.
            </summary>
            <param name = "argumentIndex">The index of the argument to get.</param>
            <returns>The argument at the specified index.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.ArgumentCollection.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection of argument values.
            </summary>
            <returns>
              A <see cref = "T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FakeItEasy.Configuration.ArgumentCollection.Get``1(System.Int32)">
            <summary>
              Gets the argument at the specified index.
            </summary>
            <typeparam name = "T">The type of the argument to get.</typeparam>
            <param name = "index">The index of the argument.</param>
            <returns>
            The argument at the specified index. Note that the value is taken from method's arguments and so may be <c>null</c>,
            even if <typeparamref name="T"/> is non-nullable.
            </returns>
        </member>
        <member name="M:FakeItEasy.Configuration.ArgumentCollection.Get``1(System.String)">
            <summary>
              Gets the argument with the specified name.
            </summary>
            <typeparam name = "T">The type of the argument to get.</typeparam>
            <param name = "argumentName">The name of the argument.</param>
            <returns>
            The argument with the specified name. Note that the value is taken from method's arguments and so may be <c>null</c>,
            even if <typeparamref name="T"/> is non-nullable.
            </returns>
        </member>
        <member name="T:FakeItEasy.Configuration.BuildableCallRule">
            <summary>
            Provides the base for rules that can be built using the FakeConfiguration.
            </summary>
        </member>
        <member name="P:FakeItEasy.Configuration.BuildableCallRule.Actions">
            <summary>
            Gets a collection of actions that should be invoked when the configured
            call is made.
            </summary>
        </member>
        <member name="P:FakeItEasy.Configuration.BuildableCallRule.CallBaseMethod">
            <summary>
            Gets or sets a value indicating whether the base method of the fake object call should be
            called when the fake object call is made.
            </summary>
        </member>
        <member name="P:FakeItEasy.Configuration.BuildableCallRule.CallWrappedMethodOn">
            <summary>
            Gets or sets a wrapped object to which the call should be delegated.
            </summary>
        </member>
        <member name="P:FakeItEasy.Configuration.BuildableCallRule.NumberOfTimesToCall">
            <summary>
            Gets or sets the number of times the configured rule should be used.
            </summary>
        </member>
        <member name="P:FakeItEasy.Configuration.BuildableCallRule.OutAndRefParametersValueProducer">
            <summary>
            Sets a function that provides values to apply to output and reference variables.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.BuildableCallRule.DescribeCallOn(FakeItEasy.IOutputWriter)">
            <summary>
            Writes a description of calls the rule is applicable to.
            </summary>
            <param name="writer">The writer on which to describe the call.</param>
        </member>
        <member name="M:FakeItEasy.Configuration.BuildableCallRule.UseApplicator(System.Action{FakeItEasy.Core.IInterceptedFakeObjectCall})">
            <summary>
            Sets an action that is called by the <see cref="M:FakeItEasy.Configuration.BuildableCallRule.Apply(FakeItEasy.Core.IInterceptedFakeObjectCall)"/> method to apply this
            rule to a fake object call.
            </summary>
            <param name="newApplicator">The action to use.</param>
        </member>
        <member name="M:FakeItEasy.Configuration.BuildableCallRule.UseDefaultApplicator">
            <summary>
            Sets (or resets) the applicator (see <see cref="M:FakeItEasy.Configuration.BuildableCallRule.UseApplicator(System.Action{FakeItEasy.Core.IInterceptedFakeObjectCall})"/>) to the default action:
            the same as a newly-created rule would have.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.BuildableCallRule.IsApplicableTo(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets if this rule is applicable to the specified call.
            </summary>
            <param name="fakeObjectCall">The call to validate.</param>
            <returns>True if the rule applies to the call.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.BuildableCallRule.WriteDescriptionOfValidCall(FakeItEasy.IOutputWriter)">
            <summary>
            Writes a description of calls the rule is applicable to.
            </summary>
            <param name="writer">The writer to write the description to.</param>
        </member>
        <member name="M:FakeItEasy.Configuration.BuildableCallRule.CloneCallSpecification">
            <summary>
            Clones the part of the rule that describes which call is being configured.
            </summary>
            <returns>The cloned rule.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.BuildableCallRule.SetOutAndRefParametersValueProducer(System.Func{FakeItEasy.Core.IFakeObjectCall,System.Collections.Generic.ICollection{System.Object}})">
            <summary>
            Sets the delegate that will provide out and ref parameters when an applicable call is made.
            May only be called once per BuildableCallRule.
            <seealso cref="P:FakeItEasy.Configuration.BuildableCallRule.OutAndRefParametersValueProducer" />
            </summary>
            <param name="producer">The new value producer.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the SetOutAndRefParametersValueProducer method has previously been called.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.BuildableCallRule.CloneCallSpecificationCore">
            <summary>
            When overridden in a derived class, returns a new instance of the same type and copies the call
            specification members for that type.
            </summary>
            <returns>The cloned rule.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.IExceptionThrowerConfiguration`1">
            <summary>
            Configuration that lets the developer specify that an exception should be
            thrown by a fake object call.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.IExceptionThrowerConfiguration`1.Throws``1(System.Func{``0,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IExceptionThrowerConfiguration`1.Throws``2(System.Func{``0,``1,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IExceptionThrowerConfiguration`1.Throws``3(System.Func{``0,``1,``2,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IExceptionThrowerConfiguration`1.Throws``4(System.Func{``0,``1,``2,``3,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IExceptionThrowerConfiguration`1.Throws``5(System.Func{``0,``1,``2,``3,``4,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IExceptionThrowerConfiguration`1.Throws``6(System.Func{``0,``1,``2,``3,``4,``5,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IExceptionThrowerConfiguration`1.Throws``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IExceptionThrowerConfiguration`1.Throws``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IExceptionThrowerConfiguration`1.Throws(System.Func{FakeItEasy.Core.IFakeObjectCall,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that creates the exception to throw.</param>
            <returns>Configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IExceptionThrowerConfiguration`1.Throws``1">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <typeparam name="T">The type of exception to throw.</typeparam>
            <returns>Configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.Throws``1(System.Func{``0,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.Throws``2(System.Func{``0,``1,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.Throws``3(System.Func{``0,``1,``2,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.Throws``4(System.Func{``0,``1,``2,``3,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.Throws``5(System.Func{``0,``1,``2,``3,``4,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.Throws``6(System.Func{``0,``1,``2,``3,``4,``5,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.Throws``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.Throws``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.Throws``1(System.Func{``0,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.Throws``2(System.Func{``0,``1,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.Throws``3(System.Func{``0,``1,``2,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.Throws``4(System.Func{``0,``1,``2,``3,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.Throws``5(System.Func{``0,``1,``2,``3,``4,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.Throws``6(System.Func{``0,``1,``2,``3,``4,``5,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.Throws``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.Throws``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.AssignsOutAndRefParametersLazily``1(System.Func{``0,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.AssignsOutAndRefParametersLazily``2(System.Func{``0,``1,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.AssignsOutAndRefParametersLazily``3(System.Func{``0,``1,``2,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.AssignsOutAndRefParametersLazily``4(System.Func{``0,``1,``2,``3,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.AssignsOutAndRefParametersLazily``5(System.Func{``0,``1,``2,``3,``4,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.AssignsOutAndRefParametersLazily``6(System.Func{``0,``1,``2,``3,``4,``5,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.AssignsOutAndRefParametersLazily``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.ReturnValueConfiguration`1.AssignsOutAndRefParametersLazily``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.AssignsOutAndRefParametersLazily``1(System.Func{``0,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.AssignsOutAndRefParametersLazily``2(System.Func{``0,``1,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.AssignsOutAndRefParametersLazily``3(System.Func{``0,``1,``2,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.AssignsOutAndRefParametersLazily``4(System.Func{``0,``1,``2,``3,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.AssignsOutAndRefParametersLazily``5(System.Func{``0,``1,``2,``3,``4,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.AssignsOutAndRefParametersLazily``6(System.Func{``0,``1,``2,``3,``4,``5,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.AssignsOutAndRefParametersLazily``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.RuleBuilder.AssignsOutAndRefParametersLazily``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="T:FakeItEasy.Configuration.RuleBuilder.Factory">
            <summary>
            Represents a delegate that creates a configuration object from
            a fake object and the rule to build.
            </summary>
            <param name="ruleBeingBuilt">The rule that's being built.</param>
            <param name="fakeObject">The fake object the rule is for.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.Throws``1(System.Func{``0,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.Throws``2(System.Func{``0,``1,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.Throws``3(System.Func{``0,``1,``2,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.Throws``4(System.Func{``0,``1,``2,``3,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.Throws``5(System.Func{``0,``1,``2,``3,``4,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.Throws``6(System.Func{``0,``1,``2,``3,``4,``5,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.Throws``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.Throws``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAdapter.Throws``1(System.Func{``0,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAdapter.Throws``2(System.Func{``0,``1,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAdapter.Throws``3(System.Func{``0,``1,``2,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAdapter.Throws``4(System.Func{``0,``1,``2,``3,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAdapter.Throws``5(System.Func{``0,``1,``2,``3,``4,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAdapter.Throws``6(System.Func{``0,``1,``2,``3,``4,``5,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAdapter.Throws``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAdapter.Throws``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAfterCallbackConfiguredAdapter.Throws``1(System.Func{``0,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAfterCallbackConfiguredAdapter.Throws``2(System.Func{``0,``1,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAfterCallbackConfiguredAdapter.Throws``3(System.Func{``0,``1,``2,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAfterCallbackConfiguredAdapter.Throws``4(System.Func{``0,``1,``2,``3,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAfterCallbackConfiguredAdapter.Throws``5(System.Func{``0,``1,``2,``3,``4,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAfterCallbackConfiguredAdapter.Throws``6(System.Func{``0,``1,``2,``3,``4,``5,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAfterCallbackConfiguredAdapter.Throws``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertySetterConfiguration`1.PropertySetterAfterCallbackConfiguredAdapter.Throws``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <returns>Configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="exceptionFactory"/> do not match.</exception>
        </member>
        <member name="T:FakeItEasy.Configuration.FakeConfigurationException">
            <summary>
            An exception that can be thrown when something goes wrong with the configuration
            of a fake object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.FakeConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Configuration.FakeConfigurationException"/> class.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.FakeConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Configuration.FakeConfigurationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FakeItEasy.Configuration.FakeConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Configuration.FakeConfigurationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:FakeItEasy.Configuration.IAfterCallConfiguredConfiguration`1">
            <summary>
            Lets you set up expectations and configure number of occurrences for the configured call.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
        </member>
        <member name="T:FakeItEasy.Configuration.IAfterCallConfiguredWithOutAndRefParametersConfiguration`1">
            <summary>
            A combination of the IAfterCallConfiguredConfiguration and IOutAndRefParametersConfiguration
            interfaces.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
        </member>
        <member name="T:FakeItEasy.Configuration.IAnyCallConfigurationWithNoReturnTypeSpecified">
            <summary>
            Configuration for any call to a faked object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.IAnyCallConfigurationWithNoReturnTypeSpecified.WithReturnType``1">
            <summary>
            Matches calls that have the return type specified in the generic type parameter.
            </summary>
            <typeparam name="TMember">The return type of the members to configure.</typeparam>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IAnyCallConfigurationWithNoReturnTypeSpecified.WithNonVoidReturnType">
            <summary>
            Matches calls that have any non-void return type.
            </summary>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IAnyCallConfigurationWithNoReturnTypeSpecified.WithVoidReturnType">
            <summary>
            Matches calls that have void return type.
            </summary>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.IAnyCallConfigurationWithReturnTypeSpecified`1">
            <summary>
            Aggregate of IReturnValueArgumentValidationConfiguration&lt;T&gt; and IWhereConfiguration&lt;IAnyCallConfigurationWithReturnTypeSpecified&lt;T&gt;&gt;.
            </summary>
            <typeparam name="T">The type of fake object that is configured.</typeparam>
        </member>
        <member name="T:FakeItEasy.Configuration.IAnyCallConfigurationWithVoidReturnType">
            <summary>
            Aggregate of IVoidArgumentValidationConfiguration and IWhereConfiguration&lt;IAnyCallConfigurationWithVoidReturnType&gt;.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IArgumentValidationConfiguration`1">
            <summary>
            Provides configurations to validate arguments of a fake object call.
            </summary>
            <typeparam name="TInterface">The type of interface to return.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.IArgumentValidationConfiguration`1.WhenArgumentsMatch(System.Func{FakeItEasy.Configuration.ArgumentCollection,System.Boolean})">
            <summary>
            Configures the call to be accepted when the specified predicate returns true.
            This method overrides any inline argument constraints (such as <see cref="P:FakeItEasy.A`1.Ignored"/>,
            implicit equality matchers, or anything else); only <paramref name="argumentsPredicate"/>
            is considered when matching the call.
            </summary>
            <param name="argumentsPredicate">The argument predicate.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.IAssertConfiguration">
            <summary>
            Allows the developer to assert on a call that's configured.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.IAssertConfiguration.MustHaveHappened(System.Int32,FakeItEasy.Times)">
            <summary>
            Asserts that the specified call must have happened the specified number of times exactly, or more, or less,
            depending on the <paramref name="timesOption"/>.
            </summary>
            <param name="numberOfTimes">The the number of times to expect the call to have happened, modified by <paramref name="timesOption"/>.</param>
            <param name="timesOption">Whether to expect the call to happen exactly the specified number of times, or at least the
            specified number of times, or at most the specified number of times.</param>
            <returns>An object to assert the call order.</returns>
            <example><code>
            A.CallTo(() => fake.Method()).MustHaveHappened(7, Times.Exactly)
            </code></example>
            <example><code>
            A.CallTo(() => fake.Method()).MustHaveHappened(2, Times.OrMore)
            </code></example>
            <example><code>
            A.CallTo(() => fake.Method()).MustHaveHappened(4, Times.OrLess)
            </code></example>
        </member>
        <member name="M:FakeItEasy.Configuration.IAssertConfiguration.MustHaveHappenedANumberOfTimesMatching(System.Linq.Expressions.Expression{System.Func{System.Int32,System.Boolean}})">
            <summary>
            Asserts that the specified call must have happened a number of times that matches the supplied <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A function that returns <c>true</c> if and only if the actual number of calls that happened is the desired amount.</param>
            <returns>An object to assert the call order.</returns>
            <example>Check to see if a method was called an even number of times:<code>
            A.CallTo(() => fake.Method()).MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)
            </code></example>
        </member>
        <member name="T:FakeItEasy.Configuration.IBehaviorLifetimeConfiguration`1">
            <summary>
            Provides configuration to specify the number of times a configured behavior should be applied.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.IBehaviorLifetimeConfiguration`1.NumberOfTimes(System.Int32)">
            <summary>
            Specifies the number of times the configured behavior should be applied.
            </summary>
            <param name="numberOfTimes">The number of times the configured behavior should be applied.</param>
            <returns>A configuration object that lets you define the subsequent behavior.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.ICallbackConfiguration`1">
            <summary>
            Configuration for callbacks of fake object calls.
            </summary>
            <typeparam name="TInterface">The type of interface to return.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.ICallbackConfiguration`1.Invokes(System.Action{FakeItEasy.Core.IFakeObjectCall})">
            <summary>
            Executes the specified action when a matching call is being made.
            </summary>
            <param name="action">The action to invoke.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.ICallBaseConfiguration`1">
            <summary>
            Configuration that lets you specify that a fake object call should call it's base method.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.ICallBaseConfiguration`1.CallsBaseMethod">
            <summary>
            When the configured method or methods are called the call
            will be delegated to the base method of the faked method.
            </summary>
            <returns>A configuration object.</returns>
            <exception cref="T:System.InvalidOperationException">The fake object is of an abstract type or an interface
            and no base method exists.</exception>
        </member>
        <member name="T:FakeItEasy.Configuration.ICallWrappedMethodConfiguration`1">
            <summary>
            Configuration that lets you specify that a fake object call should call the corresponding
            method on its wrapped object, assuming the fake is a wrapping fake.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.ICallWrappedMethodConfiguration`1.CallsWrappedMethod">
            <summary>
            When the configured method or methods are called the call
            will be delegated to the fake's wrapped object, assuming
            it's a wrapping fake.
            </summary>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The fake object
            is not a wrapping fake.</exception>
        </member>
        <member name="T:FakeItEasy.Configuration.IDoNothingConfiguration`1">
            <summary>
            Provides configuration methods for calls that should perform no action.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.IDoNothingConfiguration`1.DoesNothing">
            <summary>
            Configures the specified call to do nothing when called.
            </summary>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.IFakeConfigurationManager">
            <summary>
            Handles the configuration of fake object given an expression specifying
            a call on a faked object.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IManageEventConfiguration">
            <summary>
            Provides a method to specify on which fake events should be managed.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.IManageEventConfiguration.Of(System.Object)">
            <summary>
            Specifies on which fake events should be managed.
            </summary>
            <param name="fake">The fake on which events should be managed.</param>
        </member>
        <member name="T:FakeItEasy.Configuration.IOrderableCallAssertion">
            <summary>
            Allows clients to check that calls happened in the desired order.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.IOrderableCallAssertion.Then(FakeItEasy.Configuration.UnorderedCallAssertion)">
            <summary>
            Checks that the asserted call happened in order relative to others in the assertion chain.
            </summary>
            <param name="nextAssertion">An assertion describing the next call that should occur.</param>
            <returns>An object that can be used to assert that a following call was made in the expected order.</returns>
            <exception cref="T:FakeItEasy.ExpectationException">The call was not made in the expected order.</exception>
        </member>
        <member name="T:FakeItEasy.Configuration.IOutAndRefParametersConfiguration`1">
            <summary>
            Lets the developer configure output values of out and ref parameters.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.IOutAndRefParametersConfiguration`1.AssignsOutAndRefParametersLazily(System.Func{FakeItEasy.Core.IFakeObjectCall,System.Collections.Generic.ICollection{System.Object}})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IOutAndRefParametersConfiguration`1.AssignsOutAndRefParametersLazily``1(System.Func{``0,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IOutAndRefParametersConfiguration`1.AssignsOutAndRefParametersLazily``2(System.Func{``0,``1,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IOutAndRefParametersConfiguration`1.AssignsOutAndRefParametersLazily``3(System.Func{``0,``1,``2,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IOutAndRefParametersConfiguration`1.AssignsOutAndRefParametersLazily``4(System.Func{``0,``1,``2,``3,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IOutAndRefParametersConfiguration`1.AssignsOutAndRefParametersLazily``5(System.Func{``0,``1,``2,``3,``4,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IOutAndRefParametersConfiguration`1.AssignsOutAndRefParametersLazily``6(System.Func{``0,``1,``2,``3,``4,``5,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IOutAndRefParametersConfiguration`1.AssignsOutAndRefParametersLazily``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="M:FakeItEasy.Configuration.IOutAndRefParametersConfiguration`1.AssignsOutAndRefParametersLazily``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Object[]})">
            <summary>
            Specifies a function used to produce output values for out and ref parameters.
            The values should appear in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <param name="valueProducer">A function that produces the output values.</param>
            <returns>A configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">
            The signatures of the faked method and the <paramref name="valueProducer"/> do not match.
            </exception>
        </member>
        <member name="T:FakeItEasy.Configuration.IPropertySetterAfterCallbackConfiguredConfiguration">
            <summary>
            Provides configuration for property setters that have already had at least one callback configured.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IPropertySetterAnyValueConfiguration`1">
            <summary>
            Provides configuration for property setters and allows the user to specify validations for arguments.
            </summary>
            <typeparam name="TValue">The value of the property.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.IPropertySetterAnyValueConfiguration`1.To(`0)">
            <summary>
            Configures the property assignment to be accepted when the value <see cref="M:System.Object.Equals(System.Object)"/>
            <paramref name="value"/>.
            </summary>
            <param name="value">The value to match.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IPropertySetterAnyValueConfiguration`1.To(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Configures the property assignment to be accepted when the value satisfies <paramref name="valueConstraint"/>.
            This overload would be most useful when using <see cref="P:FakeItEasy.A`1.Ignored"/> or <see cref="P:FakeItEasy.A`1.That"/>.
            </summary>
            <param name="valueConstraint">The value constraint to satisfy.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.IPropertySetterConfiguration">
            <summary>
            Provides configuration for property setters and allows the user to specify validations for arguments.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IReturnValueArgumentValidationConfiguration`1">
            <summary>
            Configures a call that returns a value and allows the user to
            specify validations for arguments.
            </summary>
            <typeparam name="TMember">The type of the member.</typeparam>
        </member>
        <member name="T:FakeItEasy.Configuration.IReturnValueConfiguration`1">
            <summary>
            Configures a call that returns a value.
            </summary>
            <typeparam name="TMember">The type of the member.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.IReturnValueConfiguration`1.ReturnsLazily(System.Func{FakeItEasy.Core.IFakeObjectCall,`0})">
            <summary>
            Specifies a function used to produce a return value when the configured call is made.
            The function will be called each time this call is made and can return different values
            each time.
            </summary>
            <param name="valueProducer">A function that produces the return value.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.IStartConfiguration`1">
            <summary>
            Provides methods for configuring a fake object.
            </summary>
            <typeparam name="TFake">The type of fake object.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.IStartConfiguration`1.CallsTo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the behavior of the fake object when a call that matches the specified
            call happens.
            </summary>
            <typeparam name="TMember">The type of the return value of the member.</typeparam>
            <param name="callSpecification">An expression that specifies the calls to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IStartConfiguration`1.CallsTo(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Configures the behavior of the fake object when a call that matches the specified
            call happens.
            </summary>
            <param name="callSpecification">An expression that specifies the calls to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IStartConfiguration`1.CallsToSet``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the behavior of the fake object when the specified property is set.
            </summary>
            <typeparam name="TValue">The type of the property.</typeparam>
            <param name="propertySpecification">An expression that specifies the property to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.IStartConfiguration`1.AnyCall">
            <summary>
            Configures the behavior of the fake object when a call is made to any method on the
            object.
            </summary>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.IStartConfigurationFactory">
            <summary>
            A factory responsible for creating start configuration for fake objects.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.IStartConfigurationFactory.CreateConfiguration``1(FakeItEasy.Core.FakeManager)">
            <summary>
            Creates a start configuration for the specified fake object that fakes the
            specified type.
            </summary>
            <typeparam name="TFake">The type of the fake object.</typeparam>
            <param name="fakeObject">The fake object to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.IThenConfiguration`1">
            <summary>
            Configures the next behavior for this call.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
        </member>
        <member name="P:FakeItEasy.Configuration.IThenConfiguration`1.Then">
            <summary>
            Gets an object that lets you specify how the call will behave after the previous configuration has been consumed.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IVoidAfterCallbackConfiguredConfiguration">
            <summary>
            Provides configuration methods for methods that do not have a return value
            and that have already had at least one callback configured.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IVoidArgumentValidationConfiguration">
            <summary>
            Provides configuration methods for methods that do not have a return value and
            allows the user to specify validations for arguments.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IVoidConfiguration">
            <summary>
            Provides configuration methods for methods that do not have a return value.
            </summary>
        </member>
        <member name="T:FakeItEasy.Configuration.IWhereConfiguration`1">
            <summary>
            Provides a way to configure predicates for when a call should be applied.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
        </member>
        <member name="M:FakeItEasy.Configuration.IWhereConfiguration`1.Where(System.Func{FakeItEasy.Core.IFakeObjectCall,System.Boolean},System.Action{FakeItEasy.IOutputWriter})">
            <summary>
            Applies a predicate to constrain which calls will be considered for interception.
            </summary>
            <param name="predicate">A predicate for a fake object call.</param>
            <param name="descriptionWriter">An action that writes a description of the predicate
            to the output.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Configuration.PropertyExpressionHelper.BuildSetterFromGetter``1(FakeItEasy.Expressions.ParsedCallExpression)">
            <summary>
            Builds a parsed call expression for a property setter from the matching getter. The property must be interceptable as a faked method.
            </summary>
            <typeparam name="TValue">The return type of the getter.</typeparam>
            <param name="parsedCallExpression">
            The parsed call expression describing the getter.
            Must have a non-null <see cref="P:FakeItEasy.Expressions.ParsedCallExpression.CallTarget"/>.
            </param>
            <returns>A parsed call expression describing the setter that matches the supplied getter.</returns>
        </member>
        <member name="T:FakeItEasy.Configuration.UnorderedCallAssertion">
            <summary>
            Allows clients to check that calls happened in the desired order.
            </summary>
        </member>
        <member name="M:FakeItEasy.Configuration.UnorderedCallAssertion.Then(FakeItEasy.Configuration.UnorderedCallAssertion)">
            <summary>
            Checks that the asserted call happened in order relative to others in the assertion chain.
            </summary>
            <param name="nextAssertion">An assertion describing the next call that should occur.</param>
            <returns>An object that can be used to assert that a following call was made in the expected order.</returns>
            <exception cref="T:FakeItEasy.ExpectationException">The call was not made in the expected order.</exception>
        </member>
        <member name="M:FakeItEasy.Core.AssemblyExtensions.ReferencesFakeItEasy(System.Reflection.Assembly)">
            <summary>
            Determines whether an assembly references FakeItEasy.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns>Whether or not the assembly references FakeItEasy.</returns>
        </member>
        <member name="T:FakeItEasy.Core.BootstrapperLocator">
            <summary>
            Locate an <see cref="T:FakeItEasy.IBootstrapper"/> implementation.
            </summary>
            <remarks>
            Will search loaded assemblies for a concrete implementation,
            and if it can't find one will use the <see cref="T:FakeItEasy.DefaultBootstrapper"/>.
            </remarks>
        </member>
        <member name="M:FakeItEasy.Core.BootstrapperLocator.FindBootstrapper">
            <summary>
            Scans loaded assemblies looking for a concrete implementation of
            <see cref="T:FakeItEasy.IBootstrapper"/> that is not the <see cref="T:FakeItEasy.DefaultBootstrapper"/>.
            The first matching type is instantiated and returned, or an
            instance of DefaultBootstrapper is used if no other implementation is found.
            </summary>
            <returns>An instance of the first non-default IBootstrapper implementation found,
            or a DefaultBootstrapper.</returns>
        </member>
        <member name="T:FakeItEasy.Core.CallRuleMetadata">
            <summary>
            Keeps track of metadata for interceptions.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.CallRuleMetadata.CalledNumberOfTimes">
            <summary>
            Gets the number of times the rule has been used.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.CallRuleMetadata.Rule">
            <summary>
            Gets the rule this metadata object is tracking.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.CallRuleMetadata.CalledOnce(FakeItEasy.Core.IFakeObjectCallRule)">
            <summary>
            Creates a CallRuleMetadata representing a rule that has been called once.
            </summary>
            <param name="rule">The rule.</param>
            <returns>The new CallRuleMetadata instance.</returns>
        </member>
        <member name="M:FakeItEasy.Core.CallRuleMetadata.NeverCalled(FakeItEasy.Core.IFakeObjectCallRule)">
            <summary>
            Creates a CallRuleMetadata representing a rule that has not yet been called.
            </summary>
            <param name="rule">The rule.</param>
            <returns>The new CallRuleMetadata instance.</returns>
        </member>
        <member name="M:FakeItEasy.Core.CallRuleMetadata.HasNotBeenCalledSpecifiedNumberOfTimes">
            <summary>
            Gets whether the rule has been called the number of times specified or not.
            </summary>
            <returns>True if the rule has not been called the number of times specified.</returns>
        </member>
        <member name="M:FakeItEasy.Core.CallRuleMetadata.RecordCall">
            <summary>
            Records that this rule has been called an additional time.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.DefaultFakeManagerAccessor">
            <summary>
            Default implementation of <see cref="T:FakeItEasy.Core.IFakeManagerAccessor"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.DefaultFakeManagerAccessor.GetFakeManager(System.Object)">
            <summary>
            Gets the fake manager associated with the proxy.
            </summary>
            <param name="proxy">The proxy to get the manager from.</param>
            <returns>A fake manager.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="proxy"/> is not actually a faked object.</exception>
        </member>
        <member name="M:FakeItEasy.Core.DefaultFakeManagerAccessor.TryGetFakeManager(System.Object)">
            <summary>
            Gets the fake manager associated with the proxy, if any.
            </summary>
            <param name="proxy">The proxy to get the manager from.</param>
            <returns>The fake manager, or <c>null</c> if <paramref name="proxy"/> is not actually a faked object.</returns>
        </member>
        <member name="T:FakeItEasy.Core.DefaultFakeObjectCallFormatter">
            <summary>
            The default implementation of the IFakeObjectCallFormatter interface.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.DefaultFakeObjectCallFormatter.GetDescription(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets a human readable description of the specified
            fake object call.
            </summary>
            <param name="call">The call to get a description for.</param>
            <returns>A description of the call.</returns>
        </member>
        <member name="T:FakeItEasy.Core.DelegateRaiser`1">
            <summary>
            A class exposing an event handler to attach to a delegate-type event of a faked object
            in order to raise that event.
            </summary>
            <typeparam name="TEventHandler">The type of the event handler.</typeparam>
        </member>
        <member name="M:FakeItEasy.Core.DelegateRaiser`1.#ctor(System.Object[],FakeItEasy.Core.EventHandlerArgumentProviderMap)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.DelegateRaiser`1"/> class.
            </summary>
            <param name="arguments">The arguments to be sent to the event handler.</param>
            <param name="argumentProviderMap">A map from event handlers to supplied arguments to use when raising.</param>
        </member>
        <member name="M:FakeItEasy.Core.DelegateRaiser`1.op_Implicit(FakeItEasy.Core.DelegateRaiser{`0})~`0">
            <summary>
            Converts the <c>DelegateRaiser</c> to a <c>TEventHandler</c>.
            </summary>
            <param name="raiser">The <c>DelegateRaiser</c> to convert.</param>
            <returns>A new <c>TEventHandler</c> that can be attached to an event.</returns>
        </member>
        <member name="T:FakeItEasy.Core.DummyCreationException">
            <summary>
            An exception that is thrown when there was an error creating a Dummy.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.DummyCreationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.DummyCreationException"/> class.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.DummyCreationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.DummyCreationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FakeItEasy.Core.DummyCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.DummyCreationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:FakeItEasy.Core.DynamicDummyFactory">
            <summary>
            Tries to create Dummies by invoking an appropriate <see cref="T:FakeItEasy.IDummyFactory"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.DynamicDummyFactory.#ctor(System.Collections.Generic.IEnumerable{FakeItEasy.IDummyFactory})">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.DynamicDummyFactory" /> class.
            </summary>
            <param name="dummyFactories">The dummy factories.</param>
        </member>
        <member name="M:FakeItEasy.Core.DynamicDummyFactory.TryCreateDummyObject(System.Type,System.Object@)">
            <summary>
            Creates a Dummy object of the specified type if it's supported by the supplied factories.
            </summary>
            <param name="typeOfDummy">The type of Dummy object to create.</param>
            <param name="dummy">The Dummy object that was created, if the method returns true.</param>
            <returns>True if a Dummy object can be created.</returns>
        </member>
        <member name="T:FakeItEasy.Core.EventHandlerArgumentProviderMap.EventRaiserDelegateComparer">
            <summary>
            Allows a more lenient comparison of delegates, chiefly so <see cref="T:System.EventHandler"/>s and
            <see cref="T:System.EventHandler`1"/>s that refer to the same method on the same instance
            will compare as equal. It relies on the fact that every time an event is raised,
            <see cref="T:FakeItEasy.Raise"/> creates a new instance, and the delegate registered in the map
            targets that instance.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.FakeCreationException">
            <summary>
            An exception that is thrown when there was an error creating a fake object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.FakeCreationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.FakeCreationException"/> class.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.FakeCreationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.FakeCreationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.FakeCreationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:FakeItEasy.Core.FakeManager">
            <content>Auto fake property rule.</content>
            <content>Event rule.</content>
            <summary>
            The central point in the API for proxied fake objects handles interception
            of fake object calls by using a set of rules. User defined rules can be inserted
            by using the AddRule-method.
            </summary>
            <content>Default return value rule.</content>
            <content>Object member rule.</content>
            <content>Property behavior rule.</content>
            <content>Property setter rule.</content>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.#ctor(System.Type,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.FakeManager"/> class.
            </summary>
            <param name="fakeObjectType">The faked type.</param>
            <param name="proxy">The faked proxy object.</param>
            <param name="fakeObjectName">The name of the fake object.</param>
        </member>
        <member name="T:FakeItEasy.Core.FakeManager.Factory">
            <summary>
            A delegate responsible for creating FakeObject instances.
            </summary>
            <param name="fakeObjectType">The faked type.</param>
            <param name="proxy">The faked proxy object.</param>
            <param name="fakeObjectName">The name of the fake object.</param>
            <returns>An instance of <see cref="T:FakeItEasy.Core.FakeManager"/>.</returns>
        </member>
        <member name="P:FakeItEasy.Core.FakeManager.Object">
            <summary>
            Gets the faked proxy object.
            </summary>
            <remarks>Can be null if the proxy object has been collected by the garbage collector.</remarks>
        </member>
        <member name="P:FakeItEasy.Core.FakeManager.FakeObjectType">
            <summary>
            Gets the faked type.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.FakeManager.FakeObjectName">
            <summary>
            Gets the name of the fake.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.FakeManager.Rules">
            <summary>
            Gets the interceptions that are currently registered with the fake object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.AddRuleFirst(FakeItEasy.Core.IFakeObjectCallRule)">
            <summary>
            Adds a call rule to the fake object.
            </summary>
            <param name="rule">The rule to add.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.AddRuleLast(FakeItEasy.Core.IFakeObjectCallRule)">
            <summary>
            Adds a call rule last in the list of user rules, meaning it has the lowest priority possible.
            </summary>
            <param name="rule">The rule to add.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.RemoveRule(FakeItEasy.Core.IFakeObjectCallRule)">
            <summary>
            Removes the specified rule for the fake object.
            </summary>
            <param name="rule">The rule to remove.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.AddInterceptionListener(FakeItEasy.Core.IInterceptionListener)">
            <summary>
            Adds an interception listener to the manager.
            </summary>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.GetRecordedCalls">
            <summary>
            Returns a list of all calls on the managed object.
            </summary>
            <returns>A list of all calls on the managed object.</returns>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.ClearUserRules">
            <summary>
            Removes any specified user rules.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.ClearRecordedCalls">
            <summary>
            Removes any recorded calls.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.AddRuleAfter(FakeItEasy.Core.IFakeObjectCallRule,FakeItEasy.Core.IFakeObjectCallRule)">
            <summary>
            Adds a call rule to the fake object after the specified rule.
            </summary>
            <param name="previousRule">The rule after which to add a rule.</param>
            <param name="newRule">The rule to add.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.MutateUserRules(System.Action{System.Collections.Generic.LinkedList{FakeItEasy.Core.CallRuleMetadata}})">
            <summary>
            Provides exclusive access the list of defined user rules so a client can
            inspect and optionally modify the list without interfering with concurrent
            actions on other threads.
            </summary>
            <param name="action">An action that can inspect and update the user rules without fear of conflict.</param>
        </member>
        <member name="M:FakeItEasy.Core.FakeManager.RecordCall(FakeItEasy.Core.CompletedFakeObjectCall)">
            <summary>
            Records that a call has occurred on the managed object.
            </summary>
            <param name="call">The call to remember.</param>
        </member>
        <member name="T:FakeItEasy.Core.FakeManagerProvider">
            <summary>
            Implementation of <see cref="T:FakeItEasy.Core.IFakeCallProcessorProvider"/>, which returns a <see cref="T:FakeItEasy.Core.FakeManager"/> as "call processor" lazily (on
            the first call of <see cref="M:FakeItEasy.Core.FakeManagerProvider.Fetch(System.Object)"/> or <see cref="M:FakeItEasy.Core.FakeManagerProvider.EnsureInitialized(System.Object)"/>).
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IArgumentConstraint">
            <summary>
            Validates an argument, checks that it's valid in a specific fake call.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IArgumentConstraint.WriteDescription(FakeItEasy.IOutputWriter)">
            <summary>
            Writes a description of the argument constraint to the specified writer.
            </summary>
            <param name="writer">
            The writer.
            </param>
        </member>
        <member name="M:FakeItEasy.Core.IArgumentConstraint.IsValid(System.Object)">
            <summary>
            Gets whether the argument is valid.
            </summary>
            <param name="argument">The argument to validate.</param>
            <returns>True if the argument is valid.</returns>
        </member>
        <member name="T:FakeItEasy.Core.ICallMatcher">
            <summary>
            Represents a predicate that matches a fake object call.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.ICallMatcher.Matches(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets a value indicating whether the call matches the predicate.
            </summary>
            <param name="fakeObjectCall">The call to match.</param>
            <returns>True if the call matches the predicate.</returns>
        </member>
        <member name="T:FakeItEasy.Core.ICompletedFakeObjectCall">
            <summary>
            Represents a completed call to a fake object.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.ICompletedFakeObjectCall.ReturnValue">
            <summary>
            Gets the value that was returned from the call.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.ICompletedFakeObjectCall.ArgumentsAfterCall">
            <summary>
            Gets the arguments used in the call, after the call is made. Includes changes to the values of out and ref arguments.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IEventRaiserArgumentProvider">
            <summary>
            Used by the event raising rule of fake objects to get the event arguments used in
            a call to Raise.With.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IEventRaiserArgumentProvider.GetEventArguments(System.Object)">
            <summary>
            Gets the event arguments of the event.
            </summary>
            <param name="fake">The fake that is raising the event.</param>
            <returns>The event arguments.</returns>
        </member>
        <member name="T:FakeItEasy.Core.IFakeCallProcessor">
            <summary>
            Represents the target of intercepted calls of a fake proxy. An implementation of this interface receives calls, gets its arguments
            and can provide return values.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IFakeCallProcessor.Process(FakeItEasy.Core.InterceptedFakeObjectCall)">
            <summary>
            Processes an intercepted call of a fake proxy.
            </summary>
            <param name="fakeObjectCall">The call information (like which method has been called, its arguments, ...).</param>
        </member>
        <member name="T:FakeItEasy.Core.IFakeCallProcessorProvider">
            <summary>
            The responsibility of this interface is to instantiate a new <see cref="T:FakeItEasy.Core.IFakeCallProcessor"/> and to fully initialize it (e.g.
            applying the initial configuration). This should happen one time on the first call of <see cref="M:FakeItEasy.Core.IFakeCallProcessorProvider.Fetch(System.Object)"/> or
            <see cref="M:FakeItEasy.Core.IFakeCallProcessorProvider.EnsureInitialized(System.Object)"/>.
            </summary>
            <remarks>
            <para>
            Note that the implementation of this interface must be thread-safe and guarantee the one-time-initialization property when accessing
            the interface methods concurrently (could happen when using this provider in spawned threads in a proxy base constructor).
            </para>
            </remarks>
        </member>
        <member name="M:FakeItEasy.Core.IFakeCallProcessorProvider.Fetch(System.Object)">
            <summary>
            Create and initialize a new <see cref="T:FakeItEasy.Core.IFakeCallProcessor"/> for <paramref name="proxy"/>.
            </summary>
            <param name="proxy">The corresponding proxy object of the new <see cref="T:FakeItEasy.Core.IFakeCallProcessor"/>.</param>
            <returns>The created <see cref="T:FakeItEasy.Core.IFakeCallProcessor"/>.</returns>
        </member>
        <member name="M:FakeItEasy.Core.IFakeCallProcessorProvider.EnsureInitialized(System.Object)">
            <summary>
            Ensures that the <see cref="T:FakeItEasy.Core.IFakeCallProcessor"/> is initialized (and can be used to retrieve the proxy's fake call processor later on).
            </summary>
            <param name="proxy">The corresponding proxy object of the new <see cref="T:FakeItEasy.Core.IFakeCallProcessor"/>.</param>
        </member>
        <member name="T:FakeItEasy.Core.IFakeManagerAccessor">
            <summary>
            Attaches a fake manager to the proxy so that intercepted
            calls can be configured.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IFakeManagerAccessor.GetFakeManager(System.Object)">
            <summary>
            Gets the fake manager associated with the proxy.
            </summary>
            <param name="proxy">The proxy to get the manager from.</param>
            <returns>A fake manager.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="proxy"/> is not actually a faked object.</exception>
        </member>
        <member name="M:FakeItEasy.Core.IFakeManagerAccessor.TryGetFakeManager(System.Object)">
            <summary>
            Gets the fake manager associated with the proxy, if any.
            </summary>
            <param name="proxy">The proxy to get the manager from.</param>
            <returns>The fake manager, or <c>null</c> if <paramref name="proxy"/> is not actually a faked object.</returns>
        </member>
        <member name="M:FakeItEasy.Core.IFakeManagerAccessor.SetFakeManager(System.Object,FakeItEasy.Core.FakeManager)">
            <summary>
            Sets the fake manager for a proxy object, so that it can accessed later by <see cref="M:FakeItEasy.Core.IFakeManagerAccessor.GetFakeManager(System.Object)"/>.
            </summary>
            <param name="proxy">The proxy to tag.</param>
            <param name="manager">The fake manager.</param>
        </member>
        <member name="T:FakeItEasy.Core.IFakeObjectCall">
            <summary>
            Represents a call to a fake object.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.IFakeObjectCall.Method">
            <summary>
            Gets the method that's called.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.IFakeObjectCall.Arguments">
            <summary>
            Gets the arguments used in the call.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.IFakeObjectCall.FakedObject">
            <summary>
            Gets the faked object the call is performed on.
            </summary>
        </member>
        <member name="T:FakeItEasy.Core.IFakeObjectCallFormatter">
            <summary>
            Provides string formatting for fake object calls.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IFakeObjectCallFormatter.GetDescription(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets a human readable description of the specified
            fake object call.
            </summary>
            <param name="call">The call to get a description for.</param>
            <returns>A description of the call.</returns>
        </member>
        <member name="T:FakeItEasy.Core.IFakeObjectCallRule">
            <summary>
            Allows for intercepting call to a fake object and
            act upon them.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.IFakeObjectCallRule.NumberOfTimesToCall">
            <summary>
            Gets the number of times this call rule is valid, if it's set
            to null its infinitely valid.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IFakeObjectCallRule.IsApplicableTo(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets whether this interceptor is applicable to the specified
            call, if true is returned the Apply-method of the interceptor will
            be called.
            </summary>
            <param name="fakeObjectCall">The call to check for applicability.</param>
            <returns>True if the interceptor is applicable.</returns>
        </member>
        <member name="M:FakeItEasy.Core.IFakeObjectCallRule.Apply(FakeItEasy.Core.IInterceptedFakeObjectCall)">
            <summary>
            Applies an action to the call, might set a return value or throw
            an exception.
            </summary>
            <param name="fakeObjectCall">The call to apply the interceptor to.</param>
        </member>
        <member name="T:FakeItEasy.Core.IInterceptedFakeObjectCall">
            <summary>
            Represents a call to a fake object at interception time.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IInterceptedFakeObjectCall.SetReturnValue(System.Object)">
            <summary>
            Sets the return value of the call.
            </summary>
            <param name="value">The return value to set.</param>
        </member>
        <member name="M:FakeItEasy.Core.IInterceptedFakeObjectCall.CallBaseMethod">
            <summary>
            Calls the base method of the faked type.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.IInterceptedFakeObjectCall.SetArgumentValue(System.Int32,System.Object)">
            <summary>
            Sets the value of the argument at the specified index in the parameters list.
            </summary>
            <param name="index">The index of the argument to set the value of.</param>
            <param name="value">The value to set to the argument.</param>
        </member>
        <member name="T:FakeItEasy.Core.IInterceptionListener">
            <summary>
            Represents a listener for fake object calls, can be plugged into a
            FakeManager instance to listen to all intercepted calls.
            </summary>
            <remarks>The OnBeforeCallIntercepted method will be invoked before the OnBeforeCallIntercepted method of any
            previously added listener. The OnAfterCallIntercepted method will be invoked after the OnAfterCallIntercepted
            method of any previously added listener.</remarks>
        </member>
        <member name="M:FakeItEasy.Core.IInterceptionListener.OnBeforeCallIntercepted(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Called when the interception begins but before any call rules
            has been applied.
            </summary>
            <param name="interceptedCall">The intercepted call.</param>
        </member>
        <member name="M:FakeItEasy.Core.IInterceptionListener.OnAfterCallIntercepted(FakeItEasy.Core.ICompletedFakeObjectCall)">
            <summary>
            Called when the interception has been completed and rules has been
            applied.
            </summary>
            <param name="interceptedCall">The intercepted call.</param>
        </member>
        <member name="T:FakeItEasy.Core.ImplicitOptionsBuilderCatalogue">
            <summary>
            Finds appropriate <see cref="T:FakeItEasy.IFakeOptionsBuilder"/>s to configure fakes.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.ImplicitOptionsBuilderCatalogue.#ctor(System.Collections.Generic.IEnumerable{FakeItEasy.IFakeOptionsBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.ImplicitOptionsBuilderCatalogue" /> class.
            </summary>
            <param name="fakeOptionsBuilders">The fake options builders.</param>
        </member>
        <member name="M:FakeItEasy.Core.ImplicitOptionsBuilderCatalogue.GetImplicitOptionsBuilder(System.Type)">
            <summary>
            Gets an implicit options builder for the specified fake type.
            </summary>
            <param name="typeOfFake">The type of the fake.</param>
            <returns>An options builder for the type, or <c>null</c> if no implicit options builder is registered.</returns>
        </member>
        <member name="P:FakeItEasy.Core.InterceptedFakeObjectCall.Arguments">
            <summary>
            Gets the arguments used in the call.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.InterceptedFakeObjectCall.FakedObject">
            <summary>
            Gets the faked object the call is performed on.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.InterceptedFakeObjectCall.Method">
            <summary>
            Gets the method that's called.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.InterceptedFakeObjectCall.ReturnValue">
            <summary>
            Gets or sets the return value of the call.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.InterceptedFakeObjectCall.ToCompletedCall">
            <summary>
            Returns a completed call suitable for being recorded.
            </summary>
            <returns>A completed fake object call.</returns>
        </member>
        <member name="M:FakeItEasy.Core.InterceptedFakeObjectCall.CallBaseMethod">
            <summary>
            Calls the base method, should not be used with interface types.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.InterceptedFakeObjectCall.SetArgumentValue(System.Int32,System.Object)">
            <summary>
            Sets the specified value to the argument at the specified index.
            </summary>
            <param name="index">The index of the argument to set the value to.</param>
            <param name="value">The value to set to the argument.</param>
        </member>
        <member name="T:FakeItEasy.Core.ITypeCatalogue">
            <summary>
            Provides a set of types that are available.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.ITypeCatalogue.GetAvailableTypes">
            <summary>
            Gets a collection of available types.
            </summary>
            <returns>The available types.</returns>
        </member>
        <member name="T:FakeItEasy.Core.MethodInfoManager">
            <summary>
            Handles comparisons of instances of <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.MethodInfoManager.WillInvokeSameMethodOnTarget(System.Type,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Gets a value indicating whether the two instances of <see cref="T:System.Reflection.MethodInfo"/> would invoke the same method
            if invoked on an instance of the target type.
            </summary>
            <param name="target">The type of target for invocation.</param>
            <param name="first">The first <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <param name="second">The second <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>True if the same method would be invoked.</returns>
        </member>
        <member name="T:FakeItEasy.Core.Raise`1">
            <summary>
            A class exposing an event handler to attach to an event of a faked object
            in order to raise that event.
            </summary>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
        </member>
        <member name="M:FakeItEasy.Core.Raise`1.#ctor(System.Object,`0,FakeItEasy.Core.EventHandlerArgumentProviderMap)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.Raise`1"/> class.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event data.</param>
            <param name="argumentProviderMap">A map from event handlers to supplied arguments to use when raising.</param>
        </member>
        <member name="M:FakeItEasy.Core.Raise`1.#ctor(`0,FakeItEasy.Core.EventHandlerArgumentProviderMap)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.Raise`1"/> class. The sender will be
            the fake that raises the event.
            </summary>
            <param name="e">The event data.</param>
            <param name="argumentProviderMap">A map from event handlers to supplied arguments to use when raising.</param>
        </member>
        <member name="M:FakeItEasy.Core.Raise`1.op_Implicit(FakeItEasy.Core.Raise{`0})~System.EventHandler{`0}">
            <summary>
            Converts a raiser into an <see cref="T:System.EventHandler`1"/>.
            </summary>
            <param name="raiser">The raiser to convert.</param>
            <returns>The new event handler.</returns>
        </member>
        <member name="M:FakeItEasy.Core.Raise`1.op_Implicit(FakeItEasy.Core.Raise{`0})~System.EventHandler">
            <summary>
            Converts a raiser into an <see cref="T:System.EventHandler"/>.
            </summary>
            <param name="raiser">The raiser to convert.</param>
            <returns>The new event handler.</returns>
        </member>
        <member name="T:FakeItEasy.Core.TypeCatalogue">
            <summary>
            Provides access to all types in:
            <list type="bullet">
              <category>currently loaded assemblies that reference FakeItEasy and</category>
              <category>assemblies whose paths are supplied to the constructor, that also reference FakeItEasy.</category>
            </list>
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.TypeCatalogue.FakeItEasyAssembly">
            <summary>
            Gets the <c>FakeItEasy</c> assembly.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.TypeCatalogue.Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the available types into the <see cref="T:FakeItEasy.Core.TypeCatalogue"/>.
            </summary>
            <param name="extraAssemblyFiles">
            The full paths to assemblies from which to load types,
            as well as currently loaded assemblies.
            </param>
        </member>
        <member name="M:FakeItEasy.Core.TypeCatalogue.GetAvailableTypes">
            <summary>
            Gets a collection of available types.
            </summary>
            <returns>The available types.</returns>
        </member>
        <member name="T:FakeItEasy.Core.TypeCatalogueInstanceProvider">
            <summary>
            Provides instances from type catalogues.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.TypeCatalogueInstanceProvider.InstantiateAllOfType``1">
            <summary>
            Gets an instance per type in the catalogue that is a descendant
            of the specified type.
            </summary>
            <typeparam name="T">The type of instances to get.</typeparam>
            <returns>A sequence of instances of the specified type.</returns>
        </member>
        <member name="T:FakeItEasy.Core.WrappedObjectRule">
            <summary>
            A call rule that applies to any call and just delegates the
            call to the wrapped object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.WrappedObjectRule.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Core.WrappedObjectRule"/> class.
            Creates a new instance.
            </summary>
            <param name="wrappedInstance">
            The object to wrap.
            </param>
        </member>
        <member name="P:FakeItEasy.Core.WrappedObjectRule.NumberOfTimesToCall">
            <summary>
            Gets the number of times this call rule is valid, if it's set
            to null its infinitely valid.
            </summary>
        </member>
        <member name="P:FakeItEasy.Core.WrappedObjectRule.WrappedObject">
            <summary>
            Gets the wrapped object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Core.WrappedObjectRule.IsApplicableTo(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets whether this interceptor is applicable to the specified
            call, if true is returned the Apply-method of the interceptor will
            be called.
            </summary>
            <param name="fakeObjectCall">The call to check for applicability.</param>
            <returns>True if the interceptor is applicable.</returns>
        </member>
        <member name="M:FakeItEasy.Core.WrappedObjectRule.Apply(FakeItEasy.Core.IInterceptedFakeObjectCall)">
            <summary>
            Applies an action to the call, might set a return value or throw
            an exception.
            </summary>
            <param name="fakeObjectCall">The call to apply the interceptor to.</param>
        </member>
        <member name="T:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter">
            <summary>
            An adapter that adapts an <see cref="T:Castle.DynamicProxy.IInvocation" /> to a <see cref="T:FakeItEasy.Core.IFakeObjectCall" />.
            </summary>
        </member>
        <member name="M:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.#ctor(Castle.DynamicProxy.IInvocation)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter"/> class.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.Method">
            <summary>
            Gets the method that's called.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.Arguments">
            <summary>
            Gets the arguments used in the call.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.FakedObject">
            <summary>
            Gets the faked object the call is performed on.
            </summary>
        </member>
        <member name="M:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.ToCompletedCall">
            <summary>
            Returns a completed call suitable for being recorded.
            </summary>
            <returns>A completed fake object call.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.CallBaseMethod">
            <summary>
            Calls the base method, should not be used with interface types.
            </summary>
        </member>
        <member name="M:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.SetArgumentValue(System.Int32,System.Object)">
            <summary>
            Sets the specified value to the argument at the specified index.
            </summary>
            <param name="index">The index of the argument to set the value to.</param>
            <param name="value">The value to set to the argument.</param>
        </member>
        <member name="M:FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter.ToString">
            <summary>
            Returns a description of the call.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FakeItEasy.Creation.CreationResult.MergeIntoDummyResult(FakeItEasy.Creation.CreationResult)">
            <summary>
            Returns a creation result for a dummy by combining two results.
            Successful results are preferred to failed. Failed results will have their reasons for failure aggregated.
            </summary>
            <param name="other">The other result to merge. Must not be <c>null</c>.</param>
            <returns>A combined creation result. Successful if either input was successful, and failed otherwise.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.DummyValueResolver.#ctor(FakeItEasy.Core.DynamicDummyFactory,FakeItEasy.Creation.IFakeObjectCreator,FakeItEasy.Creation.IProxyOptionsFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Creation.DummyValueResolver"/> class.
            </summary>
            <param name="dummyFactory">The dummy factory.</param>
            <param name="fakeObjectCreator">The fake object creator.</param>
            <param name="proxyOptionsFactory">The proxy options factory.</param>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeObjectCreator.CreateFake(System.Type,FakeItEasy.Creation.IProxyOptions,FakeItEasy.Creation.IDummyValueResolver,FakeItEasy.Creation.LoopDetectingResolutionContext)">
            <summary>
            Create a fake.
            </summary>
            <param name="typeOfFake">The type of the fake.</param>
            <param name="proxyOptions">Proxy options to be used when creating the fake.</param>
            <param name="resolver">Will be used to create dummy constructor arguments, if needed.</param>
            <param name="resolutionContext">Used to detect loops in the type resolution.</param>
            <returns>A <c>CreationResult</c> that contains the fake or indicates the reason for failure.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeObjectCreator.CreateFakeWithoutLoopDetection(System.Type,FakeItEasy.Creation.IProxyOptions,FakeItEasy.Creation.IDummyValueResolver,FakeItEasy.Creation.LoopDetectingResolutionContext)">
            <summary>
            Create a fake, without first checking to see if the <paramref name="resolutionContext"/> indicates
            that we're already trying to create a fake <paramref name="typeOfFake"/>.
            </summary>
            <remarks>
            <para>Normal type resolution loop detection is avoided only for this attempt to create
            <paramref name="typeOfFake"/>. Loop detection is still on for any constructor parameters
            required to make the fake, even if they are of type <c>typeOfFake</c> (or if those
            parameters in turn require a <c>typeOfFake</c> and so on).</para>
            <para>This method should only be used when it is known that attempting to create a fake
            <c>typeOfFake</c> will not in and of itself introduce a loop, for example when
            creating a fake that is to be used as a dummy, the <see cref="T:FakeItEasy.Creation.DummyValueResolver"/>
            checks that it's safe to make a fake before using
            <see cref="T:FakeItEasy.Creation.DummyValueResolver.ResolveByCreatingFakeStrategy"/> to do so.</para>
            <para>In most cases, prefer <see cref="M:FakeItEasy.Creation.IFakeObjectCreator.CreateFake(System.Type,FakeItEasy.Creation.IProxyOptions,FakeItEasy.Creation.IDummyValueResolver,FakeItEasy.Creation.LoopDetectingResolutionContext)"/>.</para>
            </remarks>
            <param name="typeOfFake">The type of the fake.</param>
            <param name="proxyOptions">Proxy options to be used when creating the fake.</param>
            <param name="resolver">Will be used to create dummy constructor arguments, if needed.</param>
            <param name="resolutionContext">Used to detect loops in the type resolution.</param>
            <returns>A <c>CreationResult</c> that contains the fake or indicates the reason for failure.</returns>
        </member>
        <member name="T:FakeItEasy.Creation.IFakeOptions">
            <summary>
            Provides options for generating fake object.
            Has reduced functionality when compared to <see cref="T:FakeItEasy.Creation.IFakeOptions`1"/>,
            which should be used when the type of the fake being created is known.
            </summary>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions.WithArgumentsForConstructor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Specifies arguments for the constructor of the faked class.
            </summary>
            <param name="argumentsForConstructor">The arguments to pass to the constructor of the faked class.</param>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions.WithArgumentsForConstructor``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Specifies arguments for the constructor of the faked class by giving an expression with the call to
            the desired constructor using the arguments to be passed to the constructor.
            </summary>
            <param name="constructorCall">The constructor call to use when creating a class proxy.</param>
            <typeparam name="TConstructor">The type created by the example constructer.</typeparam>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions.WithAttributes(System.Linq.Expressions.Expression{System.Func{System.Attribute}}[])">
            <summary>
            Specifies that the fake should be created with these additional attributes.
            </summary>
            <param name="attributes">Expressions that create attributes to add to the proxy.</param>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions.ConfigureFake(System.Action{System.Object})">
            <summary>
            Specifies an action that should be run over the fake object for the initial configuration (during the creation of the fake proxy).
            </summary>
            <param name="action">An action to perform on the Fake.</param>
            <returns>Options object.</returns>
            <remarks>
            <para>
            Note that this method might be called when the fake is not yet fully constructed, so <paramref name="action"/> should
            use the fake instance to set up behavior, but not rely on the instance's state.
            Also, if FakeItEasy has to try multiple constructors in order
            to create the fake (for example, because one or more constructors throw exceptions and must be bypassed),
            the <c>action</c> will be called more than once, so it should be side effect-free.
            </para>
            </remarks>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions.Implements(System.Type)">
            <summary>
            Sets up the fake to implement the specified interface in addition to the
            originally faked class.
            </summary>
            <param name="interfaceType">The type of interface to implement.</param>
            <returns>Options object.</returns>
            <exception cref="T:System.ArgumentException">The specified type is not an interface.</exception>
            <exception cref="T:System.ArgumentNullException">The specified type is null.</exception>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions.Implements``1">
            <summary>
            Sets up the fake to implement the specified interface in addition to the
            originally faked class.
            </summary>
            <typeparam name="TInterface">The type of interface to implement.</typeparam>
            <returns>Options object.</returns>
            <exception cref="T:System.ArgumentException">The specified type is not an interface.</exception>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions.Wrapping(System.Object)">
            <summary>
            Specifies that the fake should delegate calls to the specified instance.
            </summary>
            <param name="wrappedInstance">The object to delegate calls to.</param>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions.Named(System.String)">
            <summary>
            Specifies the name of the fake, by which it will be referred to in error messages.
            </summary>
            <param name="name">The name of the fake.</param>
            <returns>Options object.</returns>
        </member>
        <member name="T:FakeItEasy.Creation.IFakeOptions`1">
            <summary>
            Provides options for generating fake object.
            </summary>
            <typeparam name="T">The type of fake object generated.</typeparam>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions`1.WithArgumentsForConstructor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Specifies arguments for the constructor of the faked class.
            </summary>
            <param name="argumentsForConstructor">The arguments to pass to the constructor of the faked class.</param>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions`1.WithArgumentsForConstructor(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Specifies arguments for the constructor of the faked class by giving an expression with the call to
            the desired constructor using the arguments to be passed to the constructor.
            </summary>
            <param name="constructorCall">The constructor call to use when creating a class proxy.</param>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions`1.Wrapping(`0)">
            <summary>
            Specifies that the fake should delegate calls to the specified instance.
            </summary>
            <param name="wrappedInstance">The object to delegate calls to.</param>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions`1.WithAttributes(System.Linq.Expressions.Expression{System.Func{System.Attribute}}[])">
            <summary>
            Specifies that the fake should be created with these additional attributes.
            </summary>
            <param name="attributes">Expressions that create attributes to add to the proxy.</param>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions`1.Implements(System.Type)">
            <summary>
            Sets up the fake to implement the specified interface in addition to the
            originally faked class.
            </summary>
            <param name="interfaceType">The type of interface to implement.</param>
            <returns>Options object.</returns>
            <exception cref="T:System.ArgumentException">The specified type is not an interface.</exception>
            <exception cref="T:System.ArgumentNullException">The specified type is null.</exception>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions`1.Implements``1">
            <summary>
            Sets up the fake to implement the specified interface in addition to the
            originally faked class.
            </summary>
            <typeparam name="TInterface">The type of interface to implement.</typeparam>
            <returns>Options object.</returns>
            <exception cref="T:System.ArgumentException">The specified type is not an interface.</exception>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions`1.ConfigureFake(System.Action{`0})">
            <summary>
            Specifies an action that should be run over the fake object for the initial configuration (during the creation of the fake proxy).
            </summary>
            <param name="action">An action to perform.</param>
            <returns>Options object.</returns>
            <remarks>
            <para>
            Note that this method might be called when the fake is not yet fully constructed, so <paramref name="action"/> should
            use the fake instance to set up behavior, but not rely on the instance's state.
            Also, if FakeItEasy has to try multiple constructors in order
            to create the fake (for example, because one or more constructors throw exceptions and must be bypassed),
            the <c>action</c> will be called more than once, so it should be side effect-free.
            </para>
            </remarks>
        </member>
        <member name="M:FakeItEasy.Creation.IFakeOptions`1.Named(System.String)">
            <summary>
            Specifies the name of the fake, by which it will be referred to in error messages.
            </summary>
            <param name="name">The name of the fake.</param>
            <returns>Options object.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.IMethodInterceptionValidator.MethodCanBeInterceptedOnInstance(System.Reflection.MethodInfo,System.Object,System.String@)">
            <summary>
            Gets a value indicating whether the specified method can be intercanepted by  instance.
            </summary>
            <param name="method">The member to test.</param>
            <param name="callTarget">The instance the method will be called on.</param>
            <param name="failReason">The reason the method can not be intercepted.</param>
            <returns>True if the member can be intercepted.</returns>
        </member>
        <member name="M:FakeItEasy.Creation.LoopDetectingResolutionContext.TryBeginToResolve(System.Type)">
            <summary>
            Indicate that we're trying to resolve a fake or dummy <paramref name="type"/>.
            Call <see cref="M:FakeItEasy.Creation.LoopDetectingResolutionContext.EndResolve(System.Type)"/> once the attempt to resolve the type is complete,
            so subsequent calls to this method will not detect a loop.
            </summary>
            <param name="type">The type that we're trying to resolve.</param>
            <returns>
            <c>true</c> if it's safe to resolve a <c>type</c>, or <c>false</c> if the action
            indicates that the type resolution system is in a loop.
            </returns>
        </member>
        <member name="M:FakeItEasy.Creation.LoopDetectingResolutionContext.EndResolve(System.Type)">
            <summary>
            Indicate the end of an attempt to resolve a <paramref name="type"/> object.
            Subsequent calls to <see cref="M:FakeItEasy.Creation.LoopDetectingResolutionContext.TryBeginToResolve(System.Type)"/> will now pass.
            </summary>
            <param name="type">The type that was resolved.</param>
        </member>
        <member name="T:FakeItEasy.Creation.ProxyGeneratorResult">
            <summary>
            Contains the result of a call to TryCreateProxy of IProxyGenerator.
            </summary>
        </member>
        <member name="M:FakeItEasy.Creation.ProxyGeneratorResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Creation.ProxyGeneratorResult"/> class.
            Creates a new instance representing a failed proxy
            generation attempt.
            </summary>
            <param name="reasonForFailure">
            The reason the proxy generation failed.
            </param>
        </member>
        <member name="M:FakeItEasy.Creation.ProxyGeneratorResult.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Creation.ProxyGeneratorResult"/> class.
            Creates a new instance representing a failed proxy
            generation attempt due to an exception being caught.
            </summary>
            <param name="reasonForFailure">
            The reason the proxy generation failed.
            </param>
            <param name="exception">
            The exception thrown from the creation attempt.
            </param>
        </member>
        <member name="M:FakeItEasy.Creation.ProxyGeneratorResult.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Creation.ProxyGeneratorResult"/> class.
            Creates a new instance representing a successful proxy
            generation.
            </summary>
            <param name="generatedProxy">
            The proxy that was generated.
            </param>
        </member>
        <member name="P:FakeItEasy.Creation.ProxyGeneratorResult.ProxyWasSuccessfullyGenerated">
            <summary>
            Gets a value indicating whether the proxy was successfully created.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.ProxyGeneratorResult.GeneratedProxy">
            <summary>
            Gets the generated proxy when it was successfully created.
            </summary>
        </member>
        <member name="P:FakeItEasy.Creation.ProxyGeneratorResult.ReasonForFailure">
            <summary>
            Gets the reason for failure when the generation was not successful.
            </summary>
        </member>
        <member name="T:FakeItEasy.DefaultBootstrapper">
            <summary>
            The default bootstrapper, used to initialize FakeItEasy unless another
            implementation of <see cref="T:FakeItEasy.IBootstrapper"/> is present in the assemblies
            loaded in the app domain.
            </summary>
        </member>
        <member name="M:FakeItEasy.DefaultBootstrapper.GetAssemblyFileNamesToScanForExtensions">
            <summary>
            When overridden in a derived class, provides a custom list of assembly file
            names to scan for extension points, such as
            <see cref="T:FakeItEasy.IDummyFactory"/>s, <see cref="T:FakeItEasy.IArgumentValueFormatter"/>s, and
            <see cref="T:FakeItEasy.IFakeOptionsBuilder"/>s.
            </summary>
            <returns>
            An empty list, but may be overridden to provide a list of absolute paths
            to assemblies to scan for extension points.
            </returns>
        </member>
        <member name="T:FakeItEasy.DummyFactory`1">
            <summary>
            A base implementation for factories for creating fake objects of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of fake.</typeparam>
        </member>
        <member name="P:FakeItEasy.DummyFactory`1.Priority">
            <summary>
            Gets the priority of the dummy factory. When multiple factories that apply to the same type are registered,
            the one with the highest priority is used.
            </summary>
            <remarks>The default implementation returns <see cref="P:FakeItEasy.Priority.Default"/>.</remarks>
        </member>
        <member name="M:FakeItEasy.DummyFactory`1.CanCreate(System.Type)">
            <summary>
            Whether or not this object can create a dummy of type <paramref name="type"/>.
            </summary>
            <param name="type">The type of dummy to create.</param>
            <returns>
            <c>true</c> if <paramref name="type"/> is <typeparamref name="T"/>. Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:FakeItEasy.DummyFactory`1.Create(System.Type)">
            <summary>
            Creates the dummy.
            </summary>
            <param name="type">The type of dummy to create.</param>
            <returns>The dummy object. Unlike a dummy provided by built-in FakeItEasy mechanisms, may be <c>null</c>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:FakeItEasy.DummyFactory`1.Create">
            <summary>
            Creates the dummy.
            </summary>
            <returns>The dummy object. Unlike a dummy provided by built-in FakeItEasy mechanisms, may be <c>null</c>.</returns>
        </member>
        <member name="T:FakeItEasy.EnumerableExtensions">
            <summary>
            Provides extension methods for generic usage of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.EnumerableExtensions.ToCollectionString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Joins the collection to a string.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="items">The items to join.</param>
            <param name="stringConverter">A function that converts from an category to a string value.</param>
            <param name="separator">Separator to insert between each category.</param>
            <returns>A string representation of the collection.</returns>
        </member>
        <member name="M:FakeItEasy.EnumerableExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the sequence as a list in order to avoid multiple enumerations of the original sequence.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="source">The sequence to return as a list.</param>
            <returns>The sequence cast as a list if it's actually a list; otherwise, a new list with the elements from the sequence.</returns>
        </member>
        <member name="M:FakeItEasy.EnumerableExtensions.AsList(System.Collections.IEnumerable)">
            <summary>
            Returns the sequence as a list in order to avoid multiple enumerations of the original sequence.
            </summary>
            <param name="source">The sequence to return as a list.</param>
            <returns>The sequence cast as a list if it's actually a list; otherwise, a new list with the elements from the sequence.</returns>
        </member>
        <member name="T:FakeItEasy.EventAction">
            <summary>
            Represents subscription to or unsubscription from an event of a fake.
            </summary>
            <remarks>An instance of this class can't be explicitly created. Use the static <c>Add</c> and <c>Remove</c> methods to obtain an instance.</remarks>
        </member>
        <member name="M:FakeItEasy.EventAction.Add(System.String)">
            <summary>
            Returns an <see cref="T:FakeItEasy.EventAction"/> that represents subscription to the specified event of a fake.
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>An <see cref="T:FakeItEasy.EventAction"/> that represents the action.</returns>
        </member>
        <member name="M:FakeItEasy.EventAction.Remove(System.String)">
            <summary>
            Returns an <see cref="T:FakeItEasy.EventAction"/> that represents unsubscription from the specified event of a fake.
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>An <see cref="T:FakeItEasy.EventAction"/> that represents the action.</returns>
        </member>
        <member name="M:FakeItEasy.EventAction.Add">
            <summary>
            Returns an <see cref="T:FakeItEasy.EventAction"/> that represents subscription to any event of a fake.
            </summary>
            <returns>An <see cref="T:FakeItEasy.EventAction"/> that represents the action.</returns>
        </member>
        <member name="M:FakeItEasy.EventAction.Remove">
            <summary>
            Returns an <see cref="T:FakeItEasy.EventAction"/> that represents unsubscription from any event of a fake.
            </summary>
            <returns>An <see cref="T:FakeItEasy.EventAction"/> that represents the action.</returns>
        </member>
        <member name="M:FakeItEasy.ExceptionExtensions.Rethrow(System.Exception)">
            <summary>
            Re-throws an exception, trying to preserve its stack trace.
            </summary>
            <param name="exception">The exception to rethrow.</param>
        </member>
        <member name="T:FakeItEasy.ExceptionThrowerConfigurationExtensions">
            <summary>
            Provides the extension methods for <see cref="T:FakeItEasy.Configuration.IExceptionThrowerConfiguration`1"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.ExceptionThrowerConfigurationExtensions.Throws``1(FakeItEasy.Configuration.IExceptionThrowerConfiguration{``0},System.Exception)">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exception">The exception to throw when a call that matches is invoked.</param>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <returns>Configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ExceptionThrowerConfigurationExtensions.Throws``1(FakeItEasy.Configuration.IExceptionThrowerConfiguration{``0},System.Func{System.Exception})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <param name="exceptionFactory">A function that returns the exception to throw when invoked.</param>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <returns>Configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ExceptionThrowerConfigurationExtensions.Throws``2(FakeItEasy.Configuration.IExceptionThrowerConfiguration{``0})">
            <summary>
            Throws the specified exception when the currently configured
            call gets called.
            </summary>
            <param name="configuration">The configuration to use.</param>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <typeparam name="T">The type of exception to throw.</typeparam>
            <returns>Configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.ExpectationException">
            <summary>
            An exception thrown when an expectation is not met (when asserting on fake object calls).
            </summary>
        </member>
        <member name="M:FakeItEasy.ExpectationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.ExpectationException"/> class.
            </summary>
        </member>
        <member name="M:FakeItEasy.ExpectationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.ExpectationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FakeItEasy.ExpectationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.ExpectationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:FakeItEasy.ExpressionExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.ExpressionExtensions.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates an expression, potentially by compiling it into a delegate and invoking the delegate, but faster if possible.
            </summary>
            <notes>
            This method evaluates an expression, but tries to do it in a light-weight way that doesn't compile it into a delegate.
            It is often used to determine what object/value the user-supplied Expression refers to.
            </notes>
            <param name="expression">The expression to be evaluated.</param>
            <returns>The value returned from the delegate compiled from the expression.</returns>
        </member>
        <member name="T:FakeItEasy.Expressions.ArgumentConstraints.IArgumentValueProvider">
            <summary>
            An object that may provide argument values, for example as implicitly-defined values for
            methods' out parameters.
            </summary>
        </member>
        <member name="P:FakeItEasy.Expressions.ArgumentConstraints.OutArgumentConstraint.Value">
            <summary>
            Gets the value that was used when specifying the constraint.
            Used for implicit assignment of out parameter values, not for matching.
            Since the called method has no access to the incoming parameter value,
            there's no use in accepting or rejecting calls based on the
            incoming parameter value.
            </summary>
        </member>
        <member name="M:FakeItEasy.Expressions.ArgumentConstraints.RefArgumentConstraint.#ctor(FakeItEasy.Core.IArgumentConstraint,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Expressions.ArgumentConstraints.RefArgumentConstraint" /> class by
            wrapping an existing <see cref="T:FakeItEasy.Core.IArgumentConstraint"/>.
            </summary>
            <param name="baseConstraint">The original constraint, which will be used for argument validation.</param>
            <param name="value">The value to be used when implicitly assigning values to a call's ref parameter.</param>
        </member>
        <member name="P:FakeItEasy.Expressions.ArgumentConstraints.RefArgumentConstraint.Value">
            <summary>
            Gets the value that was used when specifying the constraint.
            Used for implicit assignment of ref parameter values.
            </summary>
        </member>
        <member name="T:FakeItEasy.Expressions.CallConstraintDescriber">
            <summary>
            Describes a call constraint, as defined by a method and list of argument constraints.
            </summary>
        </member>
        <member name="M:FakeItEasy.Expressions.CallConstraintDescriber.DescribeCallOn(FakeItEasy.IOutputWriter,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{FakeItEasy.Core.IArgumentConstraint})">
            <summary>
            Writes a human readable description of the call constraint
            matcher to the supplied writer.
            </summary>
            <param name="writer">The writer on which to describe the call.</param>
            <param name="method">The method to describe.</param>
            <param name="argumentConstraints">The argument constraints applied to the method.</param>
        </member>
        <member name="M:FakeItEasy.Expressions.ExpressionArgumentConstraintFactory.GetExpressionWithoutConversion(System.Linq.Expressions.Expression)">
            <summary>
            Removes the conversion node introduced in a Linq expression by implicit conversion.
            </summary>
            <param name="expression">The expression from which to remove the conversion.</param>
            <returns>The original expression, if no conversion is happening, or the expression that would be converted.</returns>
        </member>
        <member name="T:FakeItEasy.Expressions.ExpressionCallMatcher">
            <summary>
            Handles the matching of fake object calls to expressions.
            </summary>
        </member>
        <member name="M:FakeItEasy.Expressions.ExpressionCallMatcher.#ctor(FakeItEasy.Expressions.ParsedCallExpression,FakeItEasy.Expressions.ExpressionArgumentConstraintFactory,FakeItEasy.Core.MethodInfoManager)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Expressions.ExpressionCallMatcher" /> class.
            </summary>
            <param name="parsedExpression">The parsed call specification.</param>
            <param name="constraintFactory">The constraint factory.</param>
            <param name="methodInfoManager">The method info manager to use.</param>
        </member>
        <member name="M:FakeItEasy.Expressions.ExpressionCallMatcher.DescribeCallOn(FakeItEasy.IOutputWriter)">
            <summary>
            Writes a description of calls the rule is applicable to.
            </summary>
            <param name="writer">The writer on which to describe the call.</param>
        </member>
        <member name="M:FakeItEasy.Expressions.ExpressionCallMatcher.Matches(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Matches the specified call against the expression.
            </summary>
            <param name="call">The call to match.</param>
            <returns>True if the call is matched by the expression.</returns>
        </member>
        <member name="T:FakeItEasy.Expressions.ExpressionCallRule">
            <summary>
            An implementation of the <see cref="T:FakeItEasy.Core.IFakeObjectCallRule" /> interface that uses
            expressions for evaluating if the rule is applicable to a specific call.
            </summary>
        </member>
        <member name="M:FakeItEasy.Expressions.ExpressionCallRule.#ctor(FakeItEasy.Expressions.ExpressionCallMatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Expressions.ExpressionCallRule"/> class.
            </summary>
            <param name="expressionMatcher">The expression matcher to use.</param>
        </member>
        <member name="T:FakeItEasy.Expressions.ExpressionCallRule.Factory">
            <summary>
            Handles the instantiation of ExpressionCallRule instance.
            </summary>
            <param name="callSpecification">An expression specifying the call.</param>
            <returns>A rule instance.</returns>
        </member>
        <member name="T:FakeItEasy.Expressions.ICallExpressionParser">
            <summary>
            Represents a class that can parse a lambda expression
            that represents a method or property call.
            </summary>
        </member>
        <member name="M:FakeItEasy.Expressions.ICallExpressionParser.Parse(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Parses the specified expression that represents a call to a natural fake.
            </summary>
            <param name="callExpression">The expression to parse.</param>
            <returns>The parsed expression.</returns>
            <remarks>The expression should have no parameter.</remarks>
        </member>
        <member name="M:FakeItEasy.Expressions.ICallExpressionParser.Parse(System.Linq.Expressions.LambdaExpression,System.Object)">
            <summary>
            Parses the specified expression that represents a call to an unnatural fake.
            </summary>
            <param name="callExpression">The expression to parse.</param>
            <param name="fake">The fake configured by this expression.</param>
            <returns>The parsed expression.</returns>
            <remarks>The expression should have one parameter which corresponds to the fake being configured.</remarks>
        </member>
        <member name="T:FakeItEasy.Fake">
            <summary>
            Provides static methods for accessing fake objects.
            </summary>
        </member>
        <member name="M:FakeItEasy.Fake.GetFakeManager(System.Object)">
            <summary>
            Gets the fake object that manages the faked object.
            </summary>
            <param name="fakedObject">The faked object to get the manager object for.</param>
            <returns>The fake object manager.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="fakedObject"/> is not actually a faked object.</exception>
        </member>
        <member name="M:FakeItEasy.Fake.GetCalls(System.Object)">
            <summary>
            Gets all the calls made to the specified fake object.
            </summary>
            <param name="fakedObject">The faked object.</param>
            <returns>A collection containing the calls to the object.</returns>
            <exception cref="T:System.ArgumentException">The object passed in is not a faked object.</exception>
        </member>
        <member name="M:FakeItEasy.Fake.ClearConfiguration(System.Object)">
            <summary>
            Clears the configuration of the faked object.
            </summary>
            <param name="fakedObject">The faked object to clear the configuration of.</param>
        </member>
        <member name="M:FakeItEasy.Fake.ClearRecordedCalls(System.Object)">
            <summary>
            Clears all recorded calls of the faked object.
            </summary>
            <param name="fakedObject">The faked object to clear the recorded calls of.</param>
        </member>
        <member name="M:FakeItEasy.Fake.TryGetFakeManager(System.Object,FakeItEasy.Core.FakeManager@)">
            <summary>
            Gets the fake manager associated with the proxy, if any.
            </summary>
            <param name="potentialFake">The potential proxy to get the manager from.</param>
            <param name="fakeManager">The fake manager, or <c>null</c> if <paramref name="potentialFake"/> is not actually a faked object.</param>
            <returns><c>true</c> if <paramref name="potentialFake"/> is a faked object, else <c>false</c>.</returns>
        </member>
        <member name="M:FakeItEasy.Fake.IsFake(System.Object)">
            <summary>
            Check if an object is a fake.
            </summary>
            <param name="potentialFake">The object to test.</param>
            <returns><c>true</c> if <paramref name="potentialFake"/> is a faked object, else <c>false</c>.</returns>
        </member>
        <member name="T:FakeItEasy.Fake`1">
            <summary>
            Represents a fake object that provides an API for configuring a faked object, exposed by the
            FakedObject-property.
            </summary>
            <typeparam name="T">The type of the faked object.</typeparam>
        </member>
        <member name="M:FakeItEasy.Fake`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Fake`1"/> class.
            Creates a new fake object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Fake`1.#ctor(System.Action{FakeItEasy.Creation.IFakeOptions{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Fake`1"/> class.
            Creates a new fake object using options built by <paramref name="optionsBuilder"/>.
            </summary>
            <param name="optionsBuilder">
            Action that builds options used to create the fake object.
            </param>
        </member>
        <member name="P:FakeItEasy.Fake`1.FakedObject">
            <summary>
            Gets the faked object.
            </summary>
        </member>
        <member name="P:FakeItEasy.Fake`1.RecordedCalls">
            <summary>
            Gets all calls made to the faked object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Fake`1.CallsTo(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Configures calls to the specified member.
            </summary>
            <param name="callSpecification">An expression specifying the call to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Fake`1.CallsTo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures calls to the specified member.
            </summary>
            <typeparam name="TMember">The type of value the member returns.</typeparam>
            <param name="callSpecification">An expression specifying the call to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Fake`1.CallsToSet``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures calls to the setter of the specified property.
            </summary>
            <typeparam name="TValue">The type of the property.</typeparam>
            <param name="propertySpecification">An expression specifying the property to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Fake`1.AnyCall">
            <summary>
            Configures any call to the fake object.
            </summary>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.Fake`1.CallsTo(FakeItEasy.EventAction)">
            <summary>
            Configures subscription to or unsubscription from an event of the fake object.
            </summary>
            <param name="action">An <see cref="T:FakeItEasy.EventAction"/> that represents the action to configure.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.FakeObjectCallExtensions">
            <summary>
            Provides extension methods for <see cref="T:FakeItEasy.Core.IFakeObjectCall"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.FakeObjectCallExtensions.GetArgument``1(FakeItEasy.Core.IFakeObjectCall,System.Int32)">
            <summary>
            Gets the argument at the specified index in the arguments collection
            for the call.
            </summary>
            <typeparam name="T">The type of the argument to get.</typeparam>
            <param name="call">The call to get the argument from.</param>
            <param name="argumentIndex">The index of the argument.</param>
            <returns>The value of the argument with the specified index.</returns>
        </member>
        <member name="M:FakeItEasy.FakeObjectCallExtensions.GetArgument``1(FakeItEasy.Core.IFakeObjectCall,System.String)">
            <summary>
            Gets the argument with the specified name in the arguments collection
            for the call.
            </summary>
            <typeparam name="T">The type of the argument to get.</typeparam>
            <param name="call">The call to get the argument from.</param>
            <param name="argumentName">The name of the argument.</param>
            <returns>The value of the argument with the specified name.</returns>
        </member>
        <member name="M:FakeItEasy.FakeObjectCallExtensions.GetDescription(FakeItEasy.Core.IFakeObjectCall)">
            <summary>
            Gets the description of a call to a fake object.
            </summary>
            <param name="fakeObjectCall">The call to describe.</param>
            <returns>A description of the call.</returns>
        </member>
        <member name="T:FakeItEasy.FakeOptionsBuilder`1">
            <summary>
            A base implementation for classes that can build options for fakes of type <typeparamref name="TFake"/>.
            </summary>
            <typeparam name="TFake">The type of fake.</typeparam>
        </member>
        <member name="P:FakeItEasy.FakeOptionsBuilder`1.Priority">
            <summary>
            Gets the priority of the options builder. When multiple builders that apply to
            the same type are registered, the one with the highest priority value is used.
            </summary>
            <remarks>The default implementation returns <see cref="P:FakeItEasy.Priority.Default"/>.</remarks>
        </member>
        <member name="M:FakeItEasy.FakeOptionsBuilder`1.FakeItEasy#IFakeOptionsBuilder#CanBuildOptionsForFakeOfType(System.Type)">
            <summary>
            Whether or not this object can build options for a Fake of type <paramref name="type"/>.
            </summary>
            <param name="type">The type of fake to build options for.</param>
            <returns>
            <c>true</c> if <paramref name="type"/> is <typeparamref name="TFake"/>.
            Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:FakeItEasy.FakeOptionsBuilder`1.FakeItEasy#IFakeOptionsBuilder#BuildOptions(System.Type,FakeItEasy.Creation.IFakeOptions)">
            <summary>
            Manipulates <paramref name="options"/>, which will later be used to
            create a Fake.
            </summary>
            <param name="typeOfFake">The type the fake object represents.</param>
            <param name="options">The fake options to manipulate.</param>
            <exception cref="T:System.InvalidOperationException">When <paramref name="typeOfFake"/> is not <typeparamref name="TFake"/>.</exception>
        </member>
        <member name="M:FakeItEasy.FakeOptionsBuilder`1.BuildOptions(FakeItEasy.Creation.IFakeOptions{`0})">
            <summary>
            Manipulates <paramref name="options"/>, which will later be used to
            create a Fake.
            </summary>
            <param name="options">The fake options to manipulate.</param>
        </member>
        <member name="T:FakeItEasy.FakeOptionsExtensions">
            <summary>
            Provides extension methods for <see cref="T:FakeItEasy.Creation.IFakeOptions`1"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.FakeOptionsExtensions.Strict``1(FakeItEasy.Creation.IFakeOptions{``0})">
            <summary>
            Makes the fake strict. This means that any call to the fake
            that has not been explicitly configured will throw an exception.
            </summary>
            <typeparam name="T">The type of fake object.</typeparam>
            <param name="options">Options used to create the fake object.</param>
            <returns>An options object.</returns>
        </member>
        <member name="M:FakeItEasy.FakeOptionsExtensions.Strict``1(FakeItEasy.Creation.IFakeOptions{``0},FakeItEasy.StrictFakeOptions)">
            <summary>
            Makes the fake strict. This means that any call to the fake
            that has not been explicitly configured will throw an exception,
            except calls to the <see cref="T:System.Object"/> methods specified
            in <paramref name="strictOptions"/>.
            </summary>
            <typeparam name="T">The type of fake object.</typeparam>
            <param name="options">Options used to create the fake object.</param>
            <param name="strictOptions">Strict fake options.</param>
            <returns>An options object.</returns>
        </member>
        <member name="M:FakeItEasy.FakeOptionsExtensions.Strict(FakeItEasy.Creation.IFakeOptions)">
            <summary>
            Makes the fake strict. This means that any call to the fake
            that has not been explicitly configured will throw an exception.
            </summary>
            <param name="options">Options used to create the fake object.</param>
            <returns>An options object.</returns>
        </member>
        <member name="M:FakeItEasy.FakeOptionsExtensions.Strict(FakeItEasy.Creation.IFakeOptions,FakeItEasy.StrictFakeOptions)">
            <summary>
            Makes the fake strict. This means that any call to the fake
            that has not been explicitly configured will throw an exception,
            except calls to the <see cref="T:System.Object"/> methods specified
            in <paramref name="strictOptions"/>.
            </summary>
            <param name="options">Options used to create the fake object.</param>
            <param name="strictOptions">Strict fake options.</param>
            <returns>An options object.</returns>
        </member>
        <member name="M:FakeItEasy.FakeOptionsExtensions.CallsBaseMethods``1(FakeItEasy.Creation.IFakeOptions{``0})">
            <summary>
            Makes the fake default to calling base methods, so long as they aren't abstract.
            </summary>
            <typeparam name="T">The type of fake object.</typeparam>
            <param name="options">Options used to create the fake object.</param>
            <returns>An options object.</returns>
        </member>
        <member name="M:FakeItEasy.FakeOptionsExtensions.CallsBaseMethods(FakeItEasy.Creation.IFakeOptions)">
            <summary>
            Makes the fake default to calling base methods, so long as they aren't abstract.
            </summary>
            <param name="options">Options used to create the fake object.</param>
            <returns>An options object.</returns>
        </member>
        <member name="T:FakeItEasy.Guard">
            <summary>
            Provides methods for guarding method arguments.
            </summary>
        </member>
        <member name="M:FakeItEasy.Guard.AgainstNull(System.Object,System.String)">
            <summary>
            Throws an exception if the specified argument is null.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument was null.</exception>
        </member>
        <member name="T:FakeItEasy.Guard.ValidatedNotNullAttribute">
            <summary>
            When applied to a parameter, this attribute provides an indication to code analysis that the argument has been null checked.
            </summary>
        </member>
        <member name="T:FakeItEasy.IArgumentConstraintManager`1">
            <summary>
            Manages attaching of argument constraints.
            </summary>
            <typeparam name="T">The type of argument to constrain.</typeparam>
        </member>
        <member name="M:FakeItEasy.IArgumentConstraintManager`1.Matches(System.Func{`0,System.Boolean},System.Action{FakeItEasy.IOutputWriter})">
            <summary>
            Constrains the argument with a predicate.
            </summary>
            <param name="predicate">The predicate that should constrain the argument.</param>
            <param name="descriptionWriter">An action that will be write a description of the constraint.</param>
            <returns>A dummy argument value.</returns>
        </member>
        <member name="T:FakeItEasy.IArgumentValueFormatter">
            <summary>
            Provides string formatting for arguments when written in
            call lists.
            </summary>
        </member>
        <member name="P:FakeItEasy.IArgumentValueFormatter.ForType">
            <summary>
            Gets the type of arguments this formatter works on.
            </summary>
        </member>
        <member name="P:FakeItEasy.IArgumentValueFormatter.Priority">
            <summary>
            Gets the priority of the formatter, when two formatters are
            registered for the same type the one with the highest priority value is used.
            </summary>
        </member>
        <member name="M:FakeItEasy.IArgumentValueFormatter.GetArgumentValueAsString(System.Object)">
            <summary>
            Gets a string representing the specified argument value.
            </summary>
            <param name="argumentValue">The argument value to get as a string.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="T:FakeItEasy.IBootstrapper">
            <summary>
            Bootstrapper for FakeItEasy.
            </summary>
            <remarks>
            <para>When FakeItEasy is initialized, it scans the executing app domain for implementations
            of this interface. If any are found, one will be instantiated and used to bootstrap
            FakeItEasy. If no implementations are found, then a <see cref="T:FakeItEasy.DefaultBootstrapper"/>
            will be used.</para>
            <para>The recommended way to implement IBootstrapper is to extend DefaultBootstrapper
            and override selected methods.</para>
            </remarks>
        </member>
        <member name="M:FakeItEasy.IBootstrapper.GetAssemblyFileNamesToScanForExtensions">
            <summary>
            Provides a list of assembly file names to scan for extension points, such as
            <see cref="T:FakeItEasy.IDummyFactory"/>s, <see cref="T:FakeItEasy.IArgumentValueFormatter"/>s, and
            <see cref="T:FakeItEasy.IFakeOptionsBuilder"/>s.
            </summary>
            <returns>A list of absolute paths pointing to assemblies to scan for extension points.</returns>
        </member>
        <member name="T:FakeItEasy.IDummyFactory">
            <summary>
            Represents a factory for creating dummies of certain types.
            </summary>
        </member>
        <member name="P:FakeItEasy.IDummyFactory.Priority">
            <summary>
            Gets the priority of the dummy factory. When multiple factories that apply to the same type are registered,
            the one with the highest priority value is used.
            </summary>
        </member>
        <member name="M:FakeItEasy.IDummyFactory.CanCreate(System.Type)">
            <summary>
            Whether or not this object can create a dummy of type <paramref name="type"/>.
            </summary>
            <param name="type">The type of dummy to create.</param>
            <returns>
            <c>true</c> if the object can create a dummy of type <paramref name="type"/>. Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:FakeItEasy.IDummyFactory.Create(System.Type)">
            <summary>
            Creates the dummy.
            </summary>
            <param name="type">The type of dummy to create.</param>
            <returns>The dummy object. Unlike a dummy provided by built-in FakeItEasy mechanisms, may be <c>null</c>.</returns>
        </member>
        <member name="T:FakeItEasy.IFakeOptionsBuilder">
            <summary>
            Builds options to be used during Fake creation.
            </summary>
        </member>
        <member name="P:FakeItEasy.IFakeOptionsBuilder.Priority">
            <summary>
            Gets the priority of the options builder. When multiple builders that apply to
            the same type are registered, the one with the highest priority value is used.
            </summary>
        </member>
        <member name="M:FakeItEasy.IFakeOptionsBuilder.CanBuildOptionsForFakeOfType(System.Type)">
            <summary>
            Whether or not this object can build options for a Fake of type <paramref name="type"/>.
            </summary>
            <param name="type">The type of fake to build options for.</param>
            <returns>
            <c>true</c> if this object can build options for a
            Fake of type <paramref name="type"/>. Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:FakeItEasy.IFakeOptionsBuilder.BuildOptions(System.Type,FakeItEasy.Creation.IFakeOptions)">
            <summary>
            Manipulates <paramref name="options"/>, which will later be used to
            create a Fake.
            </summary>
            <param name="typeOfFake">The type the fake object represents.</param>
            <param name="options">The fake options to manipulate.</param>
        </member>
        <member name="T:FakeItEasy.IHideObjectMembers">
            <summary>
            Hides standard Object members to make fluent interfaces
            easier to read. Found in the source of Autofac: <see href="https://code.google.com/p/autofac/"/>
            Based on blog post here:
            <see href="http://blogs.clariusconsulting.net/kzu/how-to-hide-system-object-members-from-your-interfaces/"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.IHideObjectMembers.ToString">
            <summary>
            Hides the ToString-method.
            </summary>
            <returns>A string representation of the implementing object.</returns>
        </member>
        <member name="M:FakeItEasy.IHideObjectMembers.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FakeItEasy.IHideObjectMembers.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FakeItEasy.IHideObjectMembers.GetType">
            <summary>
            Gets the type.
            </summary>
            <returns>The exact runtime type of the current instance.</returns>
        </member>
        <member name="T:FakeItEasy.INegatableArgumentConstraintManager`1">
            <summary>
            Enables negation of argument constraints.
            </summary>
            <typeparam name="T">The type of argument to constrain.</typeparam>
        </member>
        <member name="P:FakeItEasy.INegatableArgumentConstraintManager`1.Not">
            <summary>
            Inverts the logic of the subsequent constraint.
            </summary>
        </member>
        <member name="T:FakeItEasy.IOutputWriter">
            <summary>
            Represents a text writer that writes to the output.
            </summary>
        </member>
        <member name="M:FakeItEasy.IOutputWriter.Write(System.String)">
            <summary>
            Writes the specified value to the output.
            </summary>
            <param name="value">The value to write.</param>
            <returns>The writer for method chaining.</returns>
        </member>
        <member name="M:FakeItEasy.IOutputWriter.WriteArgumentValue(System.Object)">
            <summary>
            Formats the specified argument value as a string and writes
            it to the output.
            </summary>
            <param name="value">The value to write.</param>
            <returns>The writer for method chaining.</returns>
        </member>
        <member name="M:FakeItEasy.IOutputWriter.Indent">
            <summary>
            Indents the writer.
            </summary>
            <returns>A disposable that will unindent the writer when disposed.</returns>
        </member>
        <member name="T:FakeItEasy.Manage">
            <summary>
            Provides methods for managing fake events automatically.
            </summary>
        </member>
        <member name="P:FakeItEasy.Manage.AllEvents">
            <summary>
            Specifies all events of the fake.
            </summary>
            <returns>A fluent configuration object to specify the fake.</returns>
        </member>
        <member name="M:FakeItEasy.Manage.Event(System.String)">
            <summary>
            Specifies a named event of the fake.
            </summary>
            <param name="eventName">The name of the event.</param>
            <returns>A fluent configuration object to specify the fake.</returns>
        </member>
        <member name="T:FakeItEasy.MethodInfoExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="T:FakeItEasy.ObjectMethod">
            <summary>
            Convenient identifiers for the <see cref="T:System.Object"/> method a particular method might correspond to.
            </summary>
        </member>
        <member name="F:FakeItEasy.ObjectMethod.None">
            <summary>
            Corresponds to no object method.
            </summary>
        </member>
        <member name="F:FakeItEasy.ObjectMethod.EqualsMethod">
            <summary>
            Corresponds to <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="F:FakeItEasy.ObjectMethod.ToStringMethod">
            <summary>
            Corresponds to <see cref="M:System.Object.ToString"/>.
            </summary>
        </member>
        <member name="F:FakeItEasy.ObjectMethod.GetHashCodeMethod">
            <summary>
            Corresponds to <see cref="M:System.Object.GetHashCode"/>.
            </summary>
        </member>
        <member name="T:FakeItEasy.OutAndRefParametersConfigurationExtensions">
            <summary>
            Provides extension methods for <see cref="T:FakeItEasy.Configuration.IOutAndRefParametersConfiguration`1"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.OutAndRefParametersConfigurationExtensions.AssignsOutAndRefParameters``1(FakeItEasy.Configuration.IOutAndRefParametersConfiguration{``0},System.Object[])">
            <summary>
            Specifies output values for out and ref parameters. The values should appear
            in the same order as the out and ref parameters in the configured call.
            Any non out and ref parameters are ignored.
            The function will be called each time this call is made and can return different values.
            </summary>
            <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="values">The values.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:FakeItEasy.OutputWriterExtensions">
            <summary>
            Provides extensions for <see cref="T:FakeItEasy.IOutputWriter"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.OutputWriterExtensions.WriteLine(FakeItEasy.IOutputWriter)">
            <summary>
            Writes a new line to the writer.
            </summary>
            <param name="writer">The writer to write to.</param>
            <returns>The writer.</returns>
        </member>
        <member name="M:FakeItEasy.OutputWriterExtensions.Write(FakeItEasy.IOutputWriter,System.String,System.Object[])">
            <summary>
            Writes the format string to the writer.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="format">The format string to write.</param>
            <param name="args">Replacements for the format string.</param>
            <returns>The writer.</returns>
        </member>
        <member name="M:FakeItEasy.OutputWriterExtensions.Write(FakeItEasy.IOutputWriter,System.Object)">
            <summary>
            Writes the specified object to the writer (using the ToString-method of the object).
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to write to the writer.</param>
            <returns>The writer.</returns>
        </member>
        <member name="M:FakeItEasy.OutputWriterExtensions.WriteArgumentValues(FakeItEasy.IOutputWriter,System.Collections.IEnumerable)">
            <summary>
            Formats the specified argument values as strings and writes them to the output.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="values">The values to write to the writer.</param>
            <returns>The writer.</returns>
        </member>
        <member name="M:FakeItEasy.OutputWriterExtensions.WriteArgumentValuesImpl(FakeItEasy.IOutputWriter,System.Collections.IEnumerable)">
            <summary>
            Formats the specified argument values as strings and writes them to the output.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="values">The values to write to the writer.</param>
            <returns>The writer.</returns>
        </member>
        <member name="T:FakeItEasy.ParameterInfoExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
        </member>
        <member name="T:FakeItEasy.Priority">
            <summary>
            Indicates precedence between otherwise indistinguishable options, for example when deciding
            which <see cref="T:FakeItEasy.IDummyFactory"/> should be used to create a Dummy of a given type.
            In making such decisions, the higher-valued <c>Priority</c> will be used.
            </summary>
        </member>
        <member name="M:FakeItEasy.Priority.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.Priority"/> struct.
            </summary>
            <param name="value">The value of the <c>Priority</c>.</param>
            <returns>A new <c>Priority</c> with the specified value.</returns>
        </member>
        <member name="P:FakeItEasy.Priority.Default">
            <summary>
            Gets the default <c>Priority</c> used by client-supplied <see cref="T:FakeItEasy.IDummyFactory"/>s,
            <see cref="T:FakeItEasy.IFakeOptionsBuilder"/>s, and <see cref="T:FakeItEasy.IArgumentValueFormatter"/>s.
            </summary>
            <remarks>Equivalent to a Priority with value <c>0</c>.</remarks>
        </member>
        <member name="P:FakeItEasy.Priority.Internal">
            <summary>
            Gets the <c>Priority</c> used by all FakeItEasy-supplied <see cref="T:FakeItEasy.IDummyFactory"/>s,
            <see cref="T:FakeItEasy.IFakeOptionsBuilder"/>s, and <see cref="T:FakeItEasy.IArgumentValueFormatter"/>s.
            </summary>
            <remarks>
            <para>
            Equivalent to a Priority with value <c>-1</c>.
            </para>
            <para>
            We have a single such Priority because it's all that's currently needed, and
            we're unlikely to introduce built-in dummy factories, fake options builders, or
            argument value formatters that would collide with one another.
            Just in case, though, all negative values have been reserved for use by FakeItEasy.
            </para>
            </remarks>
        </member>
        <member name="M:FakeItEasy.Priority.op_LessThan(FakeItEasy.Priority,FakeItEasy.Priority)">
            <summary>
            Compares <see paramref="left"/> and <see paramref="right"/>, returning <c>true</c> if
            and only if the value of <c>left</c> is less than that of <c>right</c>.
            </summary>
            <param name="left">One priority to compare.</param>
            <param name="right">The other priority to compare.</param>
            <returns><c>true</c> if and only if the value of <c>left</c> is less than that of <c>right</c>.</returns>
        </member>
        <member name="M:FakeItEasy.Priority.op_GreaterThan(FakeItEasy.Priority,FakeItEasy.Priority)">
            <summary>
            Compares <see paramref="left"/> and <see paramref="right"/>, returning <c>true</c> if
            and only if the value of <c>left</c> is greater than that of <c>right</c>.
            </summary>
            <param name="left">One priority to compare.</param>
            <param name="right">The other priority to compare.</param>
            <returns><c>true</c> if and only if the value of <c>left</c> is greater than that of <c>right</c>.</returns>
        </member>
        <member name="M:FakeItEasy.Priority.op_LessThanOrEqual(FakeItEasy.Priority,FakeItEasy.Priority)">
            <summary>
            Compares <see paramref="left"/> and <see paramref="right"/>, returning <c>true</c> if
            and only if the value of <c>left</c> is less than or equal to that of <c>right</c>.
            </summary>
            <param name="left">One priority to compare.</param>
            <param name="right">The other priority to compare.</param>
            <returns><c>true</c> if and only if the value of <c>left</c> is less than or equal to that of <c>right</c>.</returns>
        </member>
        <member name="M:FakeItEasy.Priority.op_GreaterThanOrEqual(FakeItEasy.Priority,FakeItEasy.Priority)">
            <summary>
            Compares <see paramref="left"/> and <see paramref="right"/>, returning <c>true</c> if
            and only if the value of <c>left</c> is greater than or equal to that of <c>right</c>.
            </summary>
            <param name="left">One priority to compare.</param>
            <param name="right">The other priority to compare.</param>
            <returns><c>true</c> if and only if the value of <c>left</c> is greater than or equal to that of <c>right</c>.</returns>
        </member>
        <member name="M:FakeItEasy.Priority.op_Equality(FakeItEasy.Priority,FakeItEasy.Priority)">
            <summary>
            Compares <see paramref="left"/> and <see paramref="right"/>, returning <c>true</c> if
            and only if the value of <c>left</c> is equal to that of <c>right</c>.
            </summary>
            <param name="left">One priority to compare.</param>
            <param name="right">The other priority to compare.</param>
            <returns><c>true</c> if and only if the value of <c>left</c> is equal to that of <c>right</c>.</returns>
        </member>
        <member name="M:FakeItEasy.Priority.op_Inequality(FakeItEasy.Priority,FakeItEasy.Priority)">
            <summary>
            Compares <see paramref="left"/> and <see paramref="right"/>, returning <c>true</c> if
            and only if the value of <c>left</c> not equal to that of <c>right</c>.
            </summary>
            <param name="left">One priority to compare.</param>
            <param name="right">The other priority to compare.</param>
            <returns><c>true</c> if and only if the value of <c>left</c> is not equal to that of <c>right</c>.</returns>
        </member>
        <member name="M:FakeItEasy.Priority.CompareTo(FakeItEasy.Priority)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates
            whether the current instance precedes, follows, or occurs in the same position in the sort order as the
            other object.
            </summary>
            <returns>
            A value that indicates the relative order of the objects
            being compared. The return value has these meanings:
            <list type="bullet">
              <category>less than zero: this instance precedes <paramref name="other"/> in the sort order</category>
              <category>zero: this instance occurs in the same position in the sort order as <paramref name="other"/></category>
              <category>greater than zero: this instance follows <paramref name="other"/> in the sort order</category>
            </list>
            </returns>
            <param name="other">An object to compare with this instance.</param>
        </member>
        <member name="M:FakeItEasy.Priority.Equals(FakeItEasy.Priority)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns> True if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:FakeItEasy.Priority.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            <returns> True if the current object is equal to the <paramref name="obj"/> parameter; otherwise, false.</returns>
            <param name="obj">An object to compare with this object.</param>
        </member>
        <member name="M:FakeItEasy.Priority.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:FakeItEasy.Priority.ToString">
            <summary>
            Returns a textual description of this <see cref="T:FakeItEasy.Priority"/>.
            </summary>
            <returns>A textual description of this <see cref="T:FakeItEasy.Priority"/>, indicating its value.</returns>
        </member>
        <member name="T:FakeItEasy.Raise">
            <summary>
            Allows the developer to raise an event on a faked object.
            </summary>
        </member>
        <member name="M:FakeItEasy.Raise.With``1(System.Object,``0)">
            <summary>
            Raises an event on a faked object by attaching the event handler produced by the method
            to the event that is to be raised.
            </summary>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
            <param name="sender">The sender of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <returns>A Raise(TEventArgs)-object that exposes the event handler to attach.</returns>
        </member>
        <member name="M:FakeItEasy.Raise.With``1(``0)">
            <summary>
            Raises an event on a faked object by attaching the event handler produced by the method
            to the event that is to be raised.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <returns>
            A Raise(TEventArgs)-object that exposes the event handler to attach.
            </returns>
        </member>
        <member name="M:FakeItEasy.Raise.WithEmpty">
            <summary>
            Raises an event with empty event arguments on a faked object by attaching the event handler produced by the method
            to the event that is to be raised.
            </summary>
            <returns>
            A Raise(TEventArgs)-object that exposes the event handler to attach.
            </returns>
        </member>
        <member name="T:FakeItEasy.Raise.FreeForm">
            <summary>
            Allows the developer to raise an event with a non-standard signature on a faked object.
            Uses late binding, so requires a reference to Microsoft.CSharp when called from C#, and is not compatible
            with all CLR languages (for example Visual Basic).
            To raise non-standard events from other languages, use <see cref="T:FakeItEasy.Raise.FreeForm`1"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.Raise.FreeForm.With(System.Object[])">
            <summary>
            Raises an event with non-standard signature, resolving the actual delegate type dynamically.
            </summary>
            <param name="arguments">The arguments to send to the event handlers.</param>
            <returns>A new object that knows how to raise events.</returns>
        </member>
        <member name="T:FakeItEasy.Raise.FreeForm`1">
            <summary>
            Allows the developer to raise an event with a non-standard signature on a faked object.
            Intended to be used from languages, such as Visual Basic, that do not support late binding via dynamic
            objects, or when a reference to Microsoft.CSharp is not desired.
            Otherwise, prefer <see cref="T:FakeItEasy.Raise.FreeForm" />.
            </summary>
            <typeparam name="TEventHandler">The type of the event handler.</typeparam>
        </member>
        <member name="M:FakeItEasy.Raise.FreeForm`1.With(System.Object[])">
            <summary>
            Raises an event with non-standard signature.
            </summary>
            <param name="arguments">The arguments to send to the event handlers.</param>
            <returns>A new object that knows how to raise events.</returns>
        </member>
        <member name="T:FakeItEasy.ReturnValueConfigurationExtensions">
            <summary>
            Provides extension methods for <see cref="T:FakeItEasy.Configuration.IReturnValueConfiguration`1"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.Returns``1(FakeItEasy.Configuration.IReturnValueConfiguration{``0},``0)">
            <summary>
            Specifies the value to return when the configured call is made.
            </summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="value">The value to return.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.Returns``1(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},``0)">
            <summary>
            Specifies the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/> which is returned when the configured call is made.
            The <see cref="T:System.Threading.Tasks.Task`1"/> returned from the configured call will have a <see cref="P:System.Threading.Tasks.Task.Status"/> of <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </summary>
            <typeparam name="T">The type of the result produced by the <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="value">The <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``1(FakeItEasy.Configuration.IReturnValueConfiguration{``0},System.Func{``0})">
            <summary>
            Specifies a function used to produce a return value when the configured call is made.
            The function will be called each time this call is made and can return different values
            each time.
            </summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the return value.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``1(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``0})">
            <summary>
            Specifies a function used to produce the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/> which is returned when the configured call is made.
            The function will be called each time the configured call is made and can return different values each time.
            The <see cref="T:System.Threading.Tasks.Task`1"/> returned from the configured call will have a <see cref="P:System.Threading.Tasks.Task.Status"/> of <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </summary>
            <typeparam name="T">The type of the result produced by the <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsNextFromSequence``1(FakeItEasy.Configuration.IReturnValueConfiguration{``0},``0[])">
            <summary>
            Configures the call to return the next value from the specified sequence each time it's called.
            After the sequence has been exhausted, the call will revert to the previously configured behavior.
            </summary>
            <typeparam name="T">The type of return value.</typeparam>
            <param name="configuration">The call configuration to extend.</param>
            <param name="values">The values to return in sequence.</param>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsNextFromSequence``1(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},``0[])">
            <summary>
            Configures the call to return a <see cref="T:System.Threading.Tasks.Task`1"/> with a <see cref="P:System.Threading.Tasks.Task`1.Result"/> of
            the next value from the specified sequence each time it's called.
            After the sequence has been exhausted, the call will revert to the previously configured behavior.
            Each <see cref="T:System.Threading.Tasks.Task`1"/> returned from the configured call will have a <see cref="P:System.Threading.Tasks.Task.Status"/> of <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </summary>
            <typeparam name="T">The type of the result produced by each <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <param name="configuration">The call configuration to extend.</param>
            <param name="values">The values to use for the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of each <see cref="T:System.Threading.Tasks.Task`1"/> in sequence.</param>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.DoesNothing(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task})">
            <summary>
            Configures the specified call to do nothing when called.
            </summary>
            <param name="configuration">The call configuration to extend.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``2(FakeItEasy.Configuration.IReturnValueConfiguration{``0},System.Func{``1,``0})">
            <summary>
            Specifies a function used to produce a return value when the configured call is made.
            The function will be called each time this call is made and can return different values
            each time.
            </summary>
            <typeparam name="TReturnType">The type of the return value.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the return value.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``2(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``0})">
            <summary>
            Specifies a function used to produce the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/> which is returned when the configured call is made.
            The function will be called each time the configured call is made and can return different values each time.
            The <see cref="T:System.Threading.Tasks.Task`1"/> returned from the configured call will have a <see cref="P:System.Threading.Tasks.Task.Status"/> of <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </summary>
            <typeparam name="TReturnType">The type of the result produced by the <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``3(FakeItEasy.Configuration.IReturnValueConfiguration{``0},System.Func{``1,``2,``0})">
            <summary>
            Specifies a function used to produce a return value when the configured call is made.
            The function will be called each time this call is made and can return different values
            each time.
            </summary>
            <typeparam name="TReturnType">The type of the return value.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the return value.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``3(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,``0})">
            <summary>
            Specifies a function used to produce the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/> which is returned when the configured call is made.
            The function will be called each time the configured call is made and can return different values each time.
            The <see cref="T:System.Threading.Tasks.Task`1"/> returned from the configured call will have a <see cref="P:System.Threading.Tasks.Task.Status"/> of <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </summary>
            <typeparam name="TReturnType">The type of the result produced by the <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``4(FakeItEasy.Configuration.IReturnValueConfiguration{``0},System.Func{``1,``2,``3,``0})">
            <summary>
            Specifies a function used to produce a return value when the configured call is made.
            The function will be called each time this call is made and can return different values
            each time.
            </summary>
            <typeparam name="TReturnType">The type of the return value.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the return value.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``4(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,``3,``0})">
            <summary>
            Specifies a function used to produce the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/> which is returned when the configured call is made.
            The function will be called each time the configured call is made and can return different values each time.
            The <see cref="T:System.Threading.Tasks.Task`1"/> returned from the configured call will have a <see cref="P:System.Threading.Tasks.Task.Status"/> of <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </summary>
            <typeparam name="TReturnType">The type of the result produced by the <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``5(FakeItEasy.Configuration.IReturnValueConfiguration{``0},System.Func{``1,``2,``3,``4,``0})">
            <summary>
            Specifies a function used to produce a return value when the configured call is made.
            The function will be called each time this call is made and can return different values
            each time.
            </summary>
            <typeparam name="TReturnType">The type of the return value.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the return value.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``5(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,``3,``4,``0})">
            <summary>
            Specifies a function used to produce the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/> which is returned when the configured call is made.
            The function will be called each time the configured call is made and can return different values each time.
            The <see cref="T:System.Threading.Tasks.Task`1"/> returned from the configured call will have a <see cref="P:System.Threading.Tasks.Task.Status"/> of <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </summary>
            <typeparam name="TReturnType">The type of the result produced by the <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``6(FakeItEasy.Configuration.IReturnValueConfiguration{``0},System.Func{``1,``2,``3,``4,``5,``0})">
            <summary>
            Specifies a function used to produce a return value when the configured call is made.
            The function will be called each time this call is made and can return different values
            each time.
            </summary>
            <typeparam name="TReturnType">The type of the return value.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the return value.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``6(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,``3,``4,``5,``0})">
            <summary>
            Specifies a function used to produce the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/> which is returned when the configured call is made.
            The function will be called each time the configured call is made and can return different values each time.
            The <see cref="T:System.Threading.Tasks.Task`1"/> returned from the configured call will have a <see cref="P:System.Threading.Tasks.Task.Status"/> of <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </summary>
            <typeparam name="TReturnType">The type of the result produced by the <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``7(FakeItEasy.Configuration.IReturnValueConfiguration{``0},System.Func{``1,``2,``3,``4,``5,``6,``0})">
            <summary>
            Specifies a function used to produce a return value when the configured call is made.
            The function will be called each time this call is made and can return different values
            each time.
            </summary>
            <typeparam name="TReturnType">The type of the return value.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the return value.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``7(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,``3,``4,``5,``6,``0})">
            <summary>
            Specifies a function used to produce the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/> which is returned when the configured call is made.
            The function will be called each time the configured call is made and can return different values each time.
            The <see cref="T:System.Threading.Tasks.Task`1"/> returned from the configured call will have a <see cref="P:System.Threading.Tasks.Task.Status"/> of <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </summary>
            <typeparam name="TReturnType">The type of the result produced by the <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``8(FakeItEasy.Configuration.IReturnValueConfiguration{``0},System.Func{``1,``2,``3,``4,``5,``6,``7,``0})">
            <summary>
            Specifies a function used to produce a return value when the configured call is made.
            The function will be called each time this call is made and can return different values
            each time.
            </summary>
            <typeparam name="TReturnType">The type of the return value.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the return value.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``8(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,``3,``4,``5,``6,``7,``0})">
            <summary>
            Specifies a function used to produce the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/> which is returned when the configured call is made.
            The function will be called each time the configured call is made and can return different values each time.
            The <see cref="T:System.Threading.Tasks.Task`1"/> returned from the configured call will have a <see cref="P:System.Threading.Tasks.Task.Status"/> of <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </summary>
            <typeparam name="TReturnType">The type of the result produced by the <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``9(FakeItEasy.Configuration.IReturnValueConfiguration{``0},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``0})">
            <summary>
            Specifies a function used to produce a return value when the configured call is made.
            The function will be called each time this call is made and can return different values
            each time.
            </summary>
            <typeparam name="TReturnType">The type of the return value.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the return value.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="M:FakeItEasy.ReturnValueConfigurationExtensions.ReturnsLazily``9(FakeItEasy.Configuration.IReturnValueConfiguration{System.Threading.Tasks.Task{``0}},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``0})">
            <summary>
            Specifies a function used to produce the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/> which is returned when the configured call is made.
            The function will be called each time the configured call is made and can return different values each time.
            The <see cref="T:System.Threading.Tasks.Task`1"/> returned from the configured call will have a <see cref="P:System.Threading.Tasks.Task.Status"/> of <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </summary>
            <typeparam name="TReturnType">The type of the result produced by the <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <typeparam name="T1">The type of the first argument of the faked method call.</typeparam>
            <typeparam name="T2">The type of the second argument of the faked method call.</typeparam>
            <typeparam name="T3">The type of the third argument of the faked method call.</typeparam>
            <typeparam name="T4">The type of the fourth argument of the faked method call.</typeparam>
            <typeparam name="T5">The type of the fifth argument of the faked method call.</typeparam>
            <typeparam name="T6">The type of the sixth argument of the faked method call.</typeparam>
            <typeparam name="T7">The type of the seventh argument of the faked method call.</typeparam>
            <typeparam name="T8">The type of the eighth argument of the faked method call.</typeparam>
            <param name="configuration">The configuration to extend.</param>
            <param name="valueProducer">A function that produces the <see cref="P:System.Threading.Tasks.Task`1.Result"/> of the <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <returns>The configuration object.</returns>
            <exception cref="T:FakeItEasy.Configuration.FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        </member>
        <member name="T:FakeItEasy.RootModule">
            <summary>
            Handles the registration of root dependencies in an IoC-container.
            </summary>
        </member>
        <member name="T:FakeItEasy.Sdk.Create">
            <summary>
            Provides methods for generating fake objects.
            </summary>
        </member>
        <member name="M:FakeItEasy.Sdk.Create.Fake(System.Type)">
            <summary>
            Creates a fake object of the specified type.
            </summary>
            <param name="typeOfFake">The type of fake object to create.</param>
            <returns>A fake object.</returns>
        </member>
        <member name="M:FakeItEasy.Sdk.Create.Fake(System.Type,System.Action{FakeItEasy.Creation.IFakeOptions})">
            <summary>
            Creates a fake object of the specified type.
            </summary>
            <param name="typeOfFake">The type of fake object to create.</param>
            <param name="optionsBuilder">A function that specifies options for the fake object.</param>
            <returns>A fake object.</returns>
        </member>
        <member name="M:FakeItEasy.Sdk.Create.CollectionOfFake(System.Type,System.Int32)">
            <summary>
            Creates a collection of fakes of the specified type.
            </summary>
            <param name="typeOfFake">The type of fakes to create.</param>
            <param name="numberOfFakes">The number of fakes in the collection.</param>
            <returns>A collection of fake objects of the specified type.</returns>
        </member>
        <member name="M:FakeItEasy.Sdk.Create.CollectionOfFake(System.Type,System.Int32,System.Action{FakeItEasy.Creation.IFakeOptions})">
            <summary>
            Creates a collection of fakes of the specified type.
            </summary>
            <param name="typeOfFake">The type of fakes to create.</param>
            <param name="numberOfFakes">The number of fakes in the collection.</param>
            <param name="optionsBuilder">A function that specifies options for each fake object.</param>
            <returns>A collection of fake objects of the specified type.</returns>
        </member>
        <member name="M:FakeItEasy.Sdk.Create.CollectionOfFake(System.Type,System.Int32,System.Action{FakeItEasy.Creation.IFakeOptions,System.Int32})">
            <summary>
            Creates a collection of fakes of the specified type.
            </summary>
            <param name="typeOfFake">The type of fakes to create.</param>
            <param name="numberOfFakes">The number of fakes in the collection.</param>
            <param name="optionsBuilder">
            A function that specifies options for each fake object;
            the second parameter of the function represents the 0-based index of the source element.
            </param>
            <returns>A collection of fake objects of the specified type.</returns>
        </member>
        <member name="M:FakeItEasy.Sdk.Create.Dummy(System.Type)">
            <summary>
            Gets a dummy object of the specified type. The value of a dummy object
            should be irrelevant. Dummy objects should not be configured.
            </summary>
            <param name="typeOfDummy">The type of dummy to return.</param>
            <returns>
            A dummy object of the specified type.
            May be null if a user-defined dummy factory exists that returns null for dummies of type <paramref name="typeOfDummy"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Dummies of the specified type can not be created.</exception>
        </member>
        <member name="M:FakeItEasy.Sdk.Create.CollectionOfDummy(System.Type,System.Int32)">
            <summary>
            Creates a collection of dummies of the specified type.
            </summary>
            <param name="typeOfDummy">The type of dummy to return.</param>
            <param name="numberOfDummies">The number of dummies in the collection.</param>
            <returns>
            A collection of dummy objects of the specified type.
            Individual dummies may be null if a user-defined dummy factory exists that returns null for dummies of type <paramref name="typeOfDummy"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Dummies of the specified type can not be created.</exception>
        </member>
        <member name="M:FakeItEasy.ServiceLocator.Resolve``1">
            <summary>
            Resolves an instance of the specified service type.
            </summary>
            <typeparam name="T">Type of the service.</typeparam>
            <returns>An instance of the service type.</returns>
        </member>
        <member name="T:FakeItEasy.StrictFakeOptions">
            <summary>
            Options for strict fakes.
            </summary>
        </member>
        <member name="F:FakeItEasy.StrictFakeOptions.None">
            <summary>
            Default behavior. No unconfigured method can be called, including those
            inherited from <see cref="T:System.Object" />.
            </summary>
        </member>
        <member name="F:FakeItEasy.StrictFakeOptions.AllowEquals">
            <summary>
            Calls to <see cref="M:System.Object.Equals(System.Object)"/> are allowed, and behave as if the fake weren't strict.
            </summary>
        </member>
        <member name="F:FakeItEasy.StrictFakeOptions.AllowGetHashCode">
            <summary>
            Calls to <see cref="M:System.Object.GetHashCode"/> are allowed, and behave as if the fake weren't strict.
            </summary>
        </member>
        <member name="F:FakeItEasy.StrictFakeOptions.AllowToString">
            <summary>
            Calls to <see cref="M:System.Object.ToString"/> are allowed, and behave as if the fake weren't strict.
            </summary>
        </member>
        <member name="F:FakeItEasy.StrictFakeOptions.AllowObjectMethods">
            <summary>
            Calls to all methods inherited from <see cref="T:System.Object"/> are allowed, and behave as if the fake weren't strict.
            </summary>
        </member>
        <member name="F:FakeItEasy.StrictFakeOptions.AllowEvents">
            <summary>
            Calls to event accessors are allowed, and behave as if the fake weren't strict.
            </summary>
        </member>
        <member name="T:FakeItEasy.StringBuilderExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="T:FakeItEasy.Times">
            <summary>
            Helps define the number of times to expect a faked call to have occurred.
            Can be used to indicate whether the call must have occurred exactly the specified number of
            times, at least the specified number of times, or at most the specified number of times.
            </summary>
        </member>
        <member name="P:FakeItEasy.Times.Exactly">
            <summary>
            The call must have happened exactly the specified number of times.
            </summary>
        </member>
        <member name="P:FakeItEasy.Times.OrMore">
            <summary>
            The call must have happened at least the specified number of times.
            </summary>
        </member>
        <member name="P:FakeItEasy.Times.OrLess">
            <summary>
            The call must have happened at most the specified number of times.
            </summary>
        </member>
        <member name="T:FakeItEasy.TypeExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:FakeItEasy.UserCallbackException">
            <summary>
            An exception thrown when a user-provided callback throws an exception.
            </summary>
        </member>
        <member name="M:FakeItEasy.UserCallbackException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.UserCallbackException"/> class.
            </summary>
        </member>
        <member name="M:FakeItEasy.UserCallbackException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.UserCallbackException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FakeItEasy.UserCallbackException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FakeItEasy.UserCallbackException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:FakeItEasy.ValueProducerSignatureHelper">
            <summary>
            Provides helper methods for checking the value producer signature against call signatures.
            </summary>
        </member>
        <member name="T:FakeItEasy.WhereConfigurationExtensions">
            <summary>
            Provides extension methods for <see cref="T:FakeItEasy.Configuration.IWhereConfiguration`1"/>.
            </summary>
        </member>
        <member name="M:FakeItEasy.WhereConfigurationExtensions.Where``1(FakeItEasy.Configuration.IWhereConfiguration{``0},System.Linq.Expressions.Expression{System.Func{FakeItEasy.Core.IFakeObjectCall,System.Boolean}})">
            <summary>
            Applies a predicate to constrain which calls will be considered for interception.
            </summary>
            <typeparam name="T">The return type of the where method.</typeparam>
            <param name="configuration">The configuration object to extend.</param>
            <param name="predicate">A predicate for a fake object call.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute"/> class with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets a value indicating whether the return value is true or false when the parameter must be non-null.</summary>
        </member>
    </members>
</doc>
